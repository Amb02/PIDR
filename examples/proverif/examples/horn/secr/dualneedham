(* Needham Shroeder publi-key protocol
   Corrected version of Lowe *)

pred c/1 elimVar,decompData.
nounif c:x.

fun pk/1.
fun encrypt/2.

query c:secret[].
query c:secretb[].

reduc
(* Initialization *)

c:c[];
c:pk(sA[]);
c:pk(sB[]);

(* The attacker *)

c:x & c:encrypt(m,pk(x)) -> c:m;
c:x -> c:pk(x);
c:x & c:y -> c:encrypt(x,y);

(* The protocol *)
(* A *)

c:pk(x) -> c:encrypt((Na[pk(x)], pk(sA[])), pk(x));
c:pk(x) & c:encrypt((Na[pk(x)], y, pk(x)), pk(sA[]))
   -> c:encrypt((y,k[pk(x)]), pk(x));

(* B *)

c:encrypt((x,y), pk(sB[])) -> c:encrypt((x, Nb[x,y], pk(sB[])), y);
c:encrypt((x,pk(sA[])), pk(sB[])) & c:encrypt((Nb[x, pk(sA[])], z), pk(sB[]))
   -> c:encrypt(secret[], pk(z));

(* B as A *)

c:pk(x) -> c:encrypt((Nba[pk(x)], pk(sB[])), pk(x));
c:pk(x) & c:encrypt((Nba[pk(x)], y, pk(x)), pk(sB[]))
   -> c:encrypt((y,kb[pk(x)]), pk(x));

(* A as B *)

c:encrypt((x,y), pk(sA[])) -> c:encrypt((x, Nab[x,y], pk(sA[])), y);
c:encrypt((x,pk(sB[])), pk(sA[])) & c:encrypt((Nab[x, pk(sB[])], z), pk(sA[]))
   -> c:encrypt(secretb[], pk(z)).


