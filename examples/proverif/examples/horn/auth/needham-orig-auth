(* Needham Shroeder public key protocol.
   Original version, with a flaw discovered by Lowe *)

pred c/1 elimVar, decompData.
nounif c:x.

fun host/1.
fun sign/2.
fun pk/1.
fun encrypt/2.

query B:x.

not c:sS[].
not c:sA[].
not c:sB[].
(* not c:Na[pk(sB[])]. *)

reduc

(* The attacker *)

c:x & c:y -> c:sign(x,y);
c:sign(x,y) -> c:x;
c:x & c:encrypt(m,pk(x)) -> c:m;
c:x -> c:pk(x);
c:x & c:y -> c:encrypt(x,y);
c:host(x);

(* The protocol *)
(* Initialisation *)

c:pk(sA[]);
c:pk(sB[]);
c:pk(sS[]);

(* A *)

c:sign((pkx, x), sS[]) -> c:encrypt((Na[pkx,i], host(sA[])), pkx);
c:sign((pkx, x), sS[]) & c:encrypt((Na[pkx,i], y), pk(sA[]))
   -> c:encrypt((y,k[x]), pkx);

(* B *)

c:encrypt((x,host(a)), pk(sB[])) & c:sign((pka, host(a)), sS[]) -> c:encrypt((x, Nb[x,host(a),j]), pka);
c:encrypt((x,host(sA[])), pk(sB[])) & c:sign((pka, host(sA[])), sS[]) & c:encrypt((Nb[x, host(sA[]),j], z), pk(sB[]))
   -> B:Nb[x, host(sA[]),j];


(* server *)

c:(host(s1),host(s2)) -> c:sign((pk(s2), host(s2)), sS[]).
