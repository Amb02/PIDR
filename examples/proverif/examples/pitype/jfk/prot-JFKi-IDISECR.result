File "prot-JFKi-IDISECR.pv", line 241, characters 12-13:
Warning: identifier xI rebound.
File "prot-JFKi-IDISECR.pv", line 236, characters 25-26:
Warning: identifier xI rebound.
Linear part:
exp(exp(g,y),z) = exp(exp(g,z),y)
Completing equations...
Completed equations:
exp(exp(g,y),z) = exp(exp(g,z),y)
Convergent part:
V(S(k,v),Pk(k),v) = true
RecoverKey(S(k_1,v_1)) = Pk(k_1)
RecoverText(S(k_2,v_2)) = v_2
D(k_3,E(k_3,v_3)) = v_3
Completing equations...
Completed equations:
D(k_3,E(k_3,v_3)) = v_3
RecoverText(S(k_2,v_2)) = v_2
RecoverKey(S(k_1,v_1)) = Pk(k_1)
V(S(k,v),Pk(k),v) = true
Process 0 (that is, the initial process):
{1}new exponent: channel;
(
    {2}!
    {3}new d: texponent;
    {4}let x: G = exp(g,d) in
    {5}out(getexponential, x);
    {6}!
    {7}out(exponent, (d,x))
) | (
    {8}new honestC: channel;
    {9}let kminus1: skey = honest(hminus1) in
    {10}let ID1: pkey = Pk(kminus1) in
    {11}let kminus2: skey = honest(hminus2) in
    {12}let ID2: pkey = Pk(kminus2) in
    {13}out(pub, ID1);
    {14}out(pub, ID2);
    (
        {15}let kIminus0: skey = honest(hIminus0) in
        {16}let IDI0: pkey = Pk(kIminus0) in
        {17}new connect0: channel;
        {18}new init0: channel;
        {19}out(pub, init0);
        (
            {20}!
            {21}in(connect0, x_1: bitstring)
        ) | (
            {22}!
            {23}in(exponent, (dI: texponent,xI: G));
            {24}!
            {25}in(init0, (autorid: idset,IDRp: pkey,saI: sainfo));
            {26}event initev(init0,autorid,IDRp,saI);
            {27}new NI: nonce;
            {28}event mess1(IDI0,NI,xI,IDRp,init0,autorid,saI);
            {29}out(c, cons1(NI,xI,IDRp));
            {30}in(c, cons2(=NI,NR: nonce,xR: G,grpinfoR_1: grpinfo,IDRl: pkey,sR2: bitstring,tR: key));
            {31}event mess2rec(IDI0,NI,NR,xR,grpinfoR_1,IDRl,sR2,tR,xI,IDRp,saI);
            {32}if ishonest(IDRl) then
            {33}event enddosi(IDI0,NI);
            {34}if (V(sR2,IDRl,(xR,grpinfoR_1)) = true) then
            {35}let h: key = exp(xR,dI) in
            {36}let Ka: key = H(h,(NI,NR,tagA)) in
            {37}let Ke: key = H(h,(NI,NR,tagE)) in
            {38}let Kv: key = H(h,(NI,NR,tagV)) in
            {39}let sI: bitstring = S(kIminus0,(NI,NR,xI,xR,IDRl,saI)) in
            {40}let eI: bitstring = E(Ke,(IDI0,saI,sI)) in
            {41}let hI: key = H(Ka,(constI,eI)) in
            {42}event mess3(IDI0,NI,NR,xI,xR,tR,eI,hI,grpinfoR_1,IDRp,saI,Kv);
            {43}out(c, cons3(NI,NR,xI,xR,tR,eI,hI));
            {44}in(c, cons4(eR: bitstring,hR: key));
            {45}if (H(Ka,(constR,eR)) = hR) then
            {46}let (sR: bitstring,saR_1: sainfo) = D(Ke,eR) in
            {47}if (V(sR,IDRl,(NI,NR,xI,xR,IDI0,saI,saR_1)) = true) then
            {48}event mess4rec(IDI0,eR,hR,connect0,IDRl,saI,saR_1,Kv);
            {49}event connectev(connect0,IDRl,saI,saR_1,Kv);
            {50}out(connect0, (IDRl,saI,saR_1,Kv))
        )
    ) | (
        {51}let kIminus3: skey = honest(hIminus3) in
        {52}let IDI3: pkey = Pk(kIminus3) in
        {53}new connect3: channel;
        {54}new init3: channel;
        {55}out(pub, init3);
        (
            {56}!
            {57}in(connect3, x_2: bitstring)
        ) | (
            {58}!
            {59}in(exponent, (dI_1: texponent,xI_1: G));
            {60}!
            {61}in(init3, (autorid_1: idset,IDRp_1: pkey,saI_1: sainfo));
            {62}event initev(init3,autorid_1,IDRp_1,saI_1);
            {63}new NI_1: nonce;
            {64}event mess1(IDI3,NI_1,xI_1,IDRp_1,init3,autorid_1,saI_1);
            {65}out(c, cons1(NI_1,xI_1,IDRp_1));
            {66}in(c, cons2(=NI_1,NR_1: nonce,xR_1: G,grpinfoR_2: grpinfo,IDRl_1: pkey,sR2_1: bitstring,tR_1: key));
            {67}event mess2rec(IDI3,NI_1,NR_1,xR_1,grpinfoR_2,IDRl_1,sR2_1,tR_1,xI_1,IDRp_1,saI_1);
            {68}if ishonest(IDRl_1) then
            {69}event enddosi(IDI3,NI_1);
            {70}if (V(sR2_1,IDRl_1,(xR_1,grpinfoR_2)) = true) then
            {71}let h_1: key = exp(xR_1,dI_1) in
            {72}let Ka_1: key = H(h_1,(NI_1,NR_1,tagA)) in
            {73}let Ke_1: key = H(h_1,(NI_1,NR_1,tagE)) in
            {74}let Kv_1: key = H(h_1,(NI_1,NR_1,tagV)) in
            {75}let sI_1: bitstring = S(kIminus3,(NI_1,NR_1,xI_1,xR_1,IDRl_1,saI_1)) in
            {76}let eI_1: bitstring = E(Ke_1,(IDI3,saI_1,sI_1)) in
            {77}let hI_1: key = H(Ka_1,(constI,eI_1)) in
            {78}event mess3(IDI3,NI_1,NR_1,xI_1,xR_1,tR_1,eI_1,hI_1,grpinfoR_2,IDRp_1,saI_1,Kv_1);
            {79}out(c, cons3(NI_1,NR_1,xI_1,xR_1,tR_1,eI_1,hI_1));
            {80}in(c, cons4(eR_1: bitstring,hR_1: key));
            {81}if (H(Ka_1,(constR,eR_1)) = hR_1) then
            {82}let (sR_1: bitstring,saR_2: sainfo) = D(Ke_1,eR_1) in
            {83}if (V(sR_1,IDRl_1,(NI_1,NR_1,xI_1,xR_1,IDI3,saI_1,saR_2)) = true) then
            {84}event mess4rec(IDI3,eR_1,hR_1,connect3,IDRl_1,saI_1,saR_2,Kv_1);
            {85}event connectev(connect3,IDRl_1,saI_1,saR_2,Kv_1);
            {86}out(connect3, (IDRl_1,saI_1,saR_2,Kv_1))
        )
    ) | (
        {87}!
        {88}new hAminus: harg;
        {89}let kAminus: skey = honest(hAminus) in
        {90}let IDA: pkey = Pk(kAminus) in
        {91}new connect: channel;
        {92}new accept: channel;
        {93}new init: channel;
        {94}new channelSIA: channel;
        {95}out(getprinc, (IDA,init,channelSIA));
        {96}in(channelSIA, SIA: idset);
        (
            {97}!
            {98}in(accept, x_3: bitstring)
        ) | (
            {99}!
            {100}in(connect, x_4: bitstring)
        ) | (
            {101}!
            {102}in(exponent, (dI_2: texponent,xI_2: G));
            {103}!
            {104}in(init, (autorid_2: idset,IDRp_2: pkey,saI_2: sainfo));
            {105}event initev(init,autorid_2,IDRp_2,saI_2);
            {106}new NI_2: nonce;
            {107}event mess1(IDA,NI_2,xI_2,IDRp_2,init,autorid_2,saI_2);
            {108}out(c, cons1(NI_2,xI_2,IDRp_2));
            {109}in(c, cons2(=NI_2,NR_2: nonce,xR_2: G,grpinfoR_3: grpinfo,IDRl_2: pkey,sR2_2: bitstring,tR_2: key));
            {110}event mess2rec(IDA,NI_2,NR_2,xR_2,grpinfoR_3,IDRl_2,sR2_2,tR_2,xI_2,IDRp_2,saI_2);
            {111}if ishonest(IDRl_2) then
            {112}event enddosi(IDA,NI_2);
            {113}if (V(sR2_2,IDRl_2,(xR_2,grpinfoR_3)) = true) then
            {114}let h_2: key = exp(xR_2,dI_2) in
            {115}let Ka_2: key = H(h_2,(NI_2,NR_2,tagA)) in
            {116}let Ke_2: key = H(h_2,(NI_2,NR_2,tagE)) in
            {117}let Kv_2: key = H(h_2,(NI_2,NR_2,tagV)) in
            {118}let sI_2: bitstring = S(kAminus,(NI_2,NR_2,xI_2,xR_2,IDRl_2,saI_2)) in
            {119}let eI_2: bitstring = E(Ke_2,(IDA,saI_2,sI_2)) in
            {120}let hI_2: key = H(Ka_2,(constI,eI_2)) in
            {121}event mess3(IDA,NI_2,NR_2,xI_2,xR_2,tR_2,eI_2,hI_2,grpinfoR_3,IDRp_2,saI_2,Kv_2);
            {122}out(c, cons3(NI_2,NR_2,xI_2,xR_2,tR_2,eI_2,hI_2));
            {123}in(c, cons4(eR_2: bitstring,hR_2: key));
            {124}if (H(Ka_2,(constR,eR_2)) = hR_2) then
            {125}let (sR_2: bitstring,saR_3: sainfo) = D(Ke_2,eR_2) in
            {126}if (V(sR_2,IDRl_2,(NI_2,NR_2,xI_2,xR_2,IDA,saI_2,saR_3)) = true) then
            {127}event mess4rec(IDA,eR_2,hR_2,connect,IDRl_2,saI_2,saR_3,Kv_2);
            {128}event connectev(connect,IDRl_2,saI_2,saR_3,Kv_2);
            {129}out(connect, (IDRl_2,saI_2,saR_3,Kv_2))
        ) | (
            {130}new KR: key;
            {131}!
            {132}in(exponent, (dR: texponent,xR_3: G));
            {133}!
            {134}in(c, cons1(NI_3: nonce,xI_3: G,IDRp_3: pkey));
            {135}event mess1rec(IDA,NI_3,xI_3,IDRp_3);
            {136}new NR_3: nonce;
            {137}new tR_3: key;
            {138}event mess2(IDA,NI_3,NR_3,xI_3,xR_3,grpinfoR,S(kAminus,(xR_3,grpinfoR)),tR_3,IDRp_3);
            {139}out(c, cons2(NI_3,NR_3,xR_3,grpinfoR,IDA,S(kAminus,(xR_3,grpinfoR)),tR_3));
            {140}new l: channel;
            (
                {141}!
                {142}in(c, cons3(=NI_3,=NR_3,xI_4: G,=xR_3,=tR_3,eI_3: bitstring,hI_3: key));
                {143}out(l, (xI_4,eI_3,hI_3))
            ) | (
                {144}in(l, (xI_5: G,eI_4: bitstring,hI_4: key));
                {145}event mess3rec(IDA,NI_3,NR_3,xI_5,xR_3,tR_3,eI_4,hI_4);
                {146}event enddosr(IDA,NI_3,NR_3);
                {147}let h_3: key = exp(xI_5,dR) in
                {148}let Ka_3: key = H(h_3,(NI_3,NR_3,tagA)) in
                {149}let Ke_3: key = H(h_3,(NI_3,NR_3,tagE)) in
                {150}let Kv_3: key = H(h_3,(NI_3,NR_3,tagV)) in
                {151}if (H(Ka_3,(constI,eI_4)) = hI_4) then
                {152}let (IDIl: pkey,saI_3: sainfo,sI_3: bitstring) = D(Ke_3,eI_4) in
                {153}if ishonest(IDIl) then
                {154}if (V(sI_3,IDIl,(NI_3,NR_3,xI_5,xR_3,IDA,grpinfoR)) = true) then
                {155}event acceptev(accept,IDIl,saI_3,saR,Kv_3);
                {156}out(accept, (IDIl,saI_3,saR,Kv_3));
                {157}let sR_3: bitstring = S(kAminus,(NI_3,NR_3,xI_5,xR_3,IDIl,saI_3,saR)) in
                {158}let eR_3: bitstring = E(Ke_3,(sR_3,saR)) in
                {159}let hR_3: key = H(Ka_3,(constR,eR_3)) in
                {160}event mess4(IDA,IDIl,eR_3,hR_3,NI_3,NR_3,xI_5,xR_3,tR_3,eI_4,hI_4);
                {161}out(c, cons4(eR_3,hR_3))
            )
        )
    )
)

Translating the process into Horn clauses...
COMPUTATIONTIME translation to clauses: 0.024057s
NUMBERIMPLIES translation to clauses: 54102
-- Non-interference hIminus0 among (hminus1[], hminus2[]), hIminus3 among (hminus1[], hminus2[]) in process 0.
Warning: using "noninterf" in the presence of equations may yield many
false attacks. If you observe false attacks, try to code the desired
property using "choice" instead.
nounif member(*x_5,y_1)/-5000
nounif memberid(*x_5,y_1)/-5000
Completing...
200 rules inserted. The rule base contains 193 rules. 141 rules in the queue.
400 rules inserted. The rule base contains 342 rules. 119 rules in the queue.
600 rules inserted. The rule base contains 486 rules. 118 rules in the queue.
800 rules inserted. The rule base contains 611 rules. 133 rules in the queue.
1000 rules inserted. The rule base contains 723 rules. 105 rules in the queue.
1200 rules inserted. The rule base contains 867 rules. 136 rules in the queue.
1400 rules inserted. The rule base contains 994 rules. 84 rules in the queue.
1600 rules inserted. The rule base contains 1130 rules. 165 rules in the queue.
1800 rules inserted. The rule base contains 1251 rules. 155 rules in the queue.
2000 rules inserted. The rule base contains 1364 rules. 101 rules in the queue.
2200 rules inserted. The rule base contains 1466 rules. 64 rules in the queue.
2400 rules inserted. The rule base contains 1573 rules. 158 rules in the queue.
2600 rules inserted. The rule base contains 1711 rules. 86 rules in the queue.
2800 rules inserted. The rule base contains 1867 rules. 36 rules in the queue.
COMPUTATIONTIME completion of rules: 0.993132s
NUMBERIMPLIES completion of rules: 361740
ok, secrecy assumption verified: fact unreachable attacker(hminus1[])
ok, secrecy assumption verified: fact unreachable attacker(hminus2[])
ok, secrecy assumption verified: fact unreachable attacker(hAminus[!1 = v_4])
ok, secrecy assumption verified: fact unreachable attacker(d[!1 = v_4])
RESULT Non-interference hIminus0 among (hminus1[], hminus2[]), hIminus3 among (hminus1[], hminus2[]) is true.
COMPUTATIONTIME solving_queries (include completion): 1.008845s
NUMBERIMPLIES solving_queries (include completion): 4810

--------------------------------------------------------------
Verification summary:

Non-interference hIminus0 among (hminus1[], hminus2[]), hIminus3 among (hminus1[], hminus2[]) is true.

--------------------------------------------------------------

