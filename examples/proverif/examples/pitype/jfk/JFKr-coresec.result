File "JFKr-coresec.pv", line 106, characters 12-13:
Warning: identifier xI rebound.
File "JFKr-coresec.pv", line 101, characters 25-26:
Warning: identifier xI rebound.
Linear part:
exp(exp(g,y),z) = exp(exp(g,z),y)
Completing equations...
Completed equations:
exp(exp(g,y),z) = exp(exp(g,z),y)
Convergent part:
Completing equations...
Completed equations:
Biprocess 0 (that is, the initial process):
{1}new exponent: channel;
{2}new cp: channel;
{3}new ids: channel;
(
    {4}!
    {5}new d: texponent;
    {6}let x: G = exp(g,d) in
    {7}out(getexponential, x);
    {8}!
    {9}out(exponent, (d,x))
) | (
    {10}!
    {11}new kAminus: skey;
    {12}let IDA: pkey = Pk(kAminus) in
    {13}new init: channel;
    {14}new getI: channel;
    {15}new getR: channel;
    {16}out(getprinc0, (IDA,getI,getR,init));
    (
        {17}!
        {18}in(exponent, (dI: texponent,xI: G));
        {19}!
        {20}in(init, dummy: bitstring);
        {21}new NI: nonce;
        {22}out(c, cons1(NI,xI));
        {23}in(c, cons2(=NI,NR: nonce,xR: G,grpinfoR_1: grpinfo,tR: key));
        {24}let h: key = exp(xR,dI) in
        {25}let Ka: key = H(h,(NI,NR,tagA)) in
        {26}let Ke: key = H(h,(NI,NR,tagE)) in
        {27}let Kv: key = H(h,(NI,NR,tagV)) in
        {28}let sI: bitstring = S(kAminus,(NI,NR,xI,xR,grpinfoR_1)) in
        {29}out(getI, (dummy,NI,NR,xI,xR,tR,Ka,Ke,Kv,sI))
    ) | (
        {30}!
        {31}in(exponent, (dR: texponent,xR_1: G));
        {32}!
        {33}in(c, cons1(NI_1: nonce,xI_1: G));
        {34}new NR_1: nonce;
        {35}new tR_1: key;
        {36}out(c, cons2(NI_1,NR_1,xR_1,grpinfoR,tR_1));
        {37}new l: channel;
        (
            {38}!
            {39}in(c, cons3(=NI_1,=NR_1,xI_2: G,=xR_1,=tR_1,eI: bitstring,hI: key));
            {40}out(l, (xI_2,eI,hI))
        ) | (
            {41}in(l, (xI_3: G,eI_1: bitstring,hI_1: key));
            (
                {42}out(d0, (NR_1,IDA))
            ) | (
                {43}let h_1: key = exp(xI_3,dR) in
                {44}let Ka_1: key = H(h_1,(NI_1,NR_1,tagA)) in
                {45}let Ke_1: key = H(h_1,(NI_1,NR_1,tagE)) in
                {46}let Kv_1: key = H(h_1,(NI_1,NR_1,tagV)) in
                {47}let sR: bitstring = S(kAminus,(NI_1,NR_1,xI_3,xR_1)) in
                {48}out(getR, (NI_1,NR_1,xI_3,xR_1,tR_1,eI_1,hI_1,Ka_1,Ke_1,Kv_1,sR))
            )
        )
    ) | (
        {49}!
        {50}out(cp, IDA)
    ) | (
        {51}!
        {52}out(ids, (kAminus,IDA))
    )
) | (
    {53}in(ids, (kAIminus: skey,IDAI: pkey));
    {54}in(ids, (kARminus: skey,IDAR: pkey));
    {55}in(exponent, (dI_1: texponent,xI_4: G));
    {56}in(exponent, (dR_1: texponent,xR_2: G));
    {57}in(init0, (IDRp: pkey,saI: sainfo,=IDAI,=IDAR,=xI_4,=xR_2));
    {58}new NI_2: nonce;
    {59}new NR_2: nonce;
    {60}new TR: key;
    {61}new NeI: bitstring;
    {62}new NhI: key;
    {63}new NeR: bitstring;
    {64}new NhR: key;
    {65}new NKv: key;
    {66}let h_2: key = exp(xR_2,dI_1) in
    {67}let Ka_2: key = H(h_2,(NI_2,NR_2,tagA)) in
    {68}let Ke_2: key = H(h_2,(NI_2,NR_2,tagE)) in
    {69}let Kv_2: key = H(h_2,(NI_2,NR_2,tagV)) in
    {70}let sR_1: bitstring = S(kARminus,(NI_2,NR_2,xI_4,xR_2)) in
    {71}let eR: bitstring = E(Ke_2,(IDAR,saR,sR_1)) in
    {72}let hR: key = H(Ka_2,(constR,eR)) in
    {73}let sI_1: bitstring = S(kAIminus,(NI_2,NR_2,xI_4,xR_2,grpinfoR)) in
    {74}let eI_2: bitstring = E(Ke_2,(IDAI,IDRp,saI,sI_1)) in
    {75}let hI_2: key = H(Ka_2,(constI,eI_2)) in
    {76}out(pub, (NI_2,NR_2,TR,choice[eI_2,NeI],choice[hI_2,NhI],choice[eR,NeR],choice[hR,NhR],choice[Kv_2,NKv]))
)

Translating the process into Horn clauses...
COMPUTATIONTIME translation to clauses: 0.028112s
NUMBERIMPLIES translation to clauses: 138645
-- Observational equivalence in biprocess 0.
Termination warning: v ≠ v_1 && attacker2(v_2,v) && attacker2(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker2(v,v_2) && attacker2(v_1,v_2) -> bad
Selecting 0
Completing...
200 rules inserted. The rule base contains 200 rules. 133 rules in the queue.
Termination warning: v ≠ v_1 && attacker2(v_2,v) && attacker2(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker2(v,v_2) && attacker2(v_1,v_2) -> bad
Selecting 0
400 rules inserted. The rule base contains 386 rules. 96 rules in the queue.
600 rules inserted. The rule base contains 549 rules. 92 rules in the queue.
800 rules inserted. The rule base contains 680 rules. 173 rules in the queue.
1000 rules inserted. The rule base contains 809 rules. 167 rules in the queue.
1200 rules inserted. The rule base contains 955 rules. 75 rules in the queue.
1400 rules inserted. The rule base contains 1103 rules. 121 rules in the queue.
1600 rules inserted. The rule base contains 1284 rules. 232 rules in the queue.
1800 rules inserted. The rule base contains 1478 rules. 190 rules in the queue.
2000 rules inserted. The rule base contains 1669 rules. 108 rules in the queue.
COMPUTATIONTIME completion of rules: 0.886999s
NUMBERIMPLIES completion of rules: 612559
ok, secrecy assumption verified: fact unreachable attacker2(kAminus[!1 = v],kAminus[!1 = v])
ok, secrecy assumption verified: fact unreachable attacker2(d[!1 = v],d[!1 = v])
RESULT Observational equivalence is true.
COMPUTATIONTIME solving_queries (include completion): 0.903187s
NUMBERIMPLIES solving_queries (include completion): 37679

--------------------------------------------------------------
Verification summary:

Observational equivalence is true.

--------------------------------------------------------------

