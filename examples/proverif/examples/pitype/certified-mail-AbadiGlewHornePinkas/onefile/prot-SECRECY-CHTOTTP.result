Process 0 (that is, the initial process):
{1}let TTPEncKey: pkey = pk(TTPDecKey) in
{2}out(c, TTPEncKey);
{3}let TTPVerKey: spkey = Spk(TTPSigKey) in
{4}out(c, TTPVerKey);
{5}let Rname: host = PasswdTable(Rpwd) in
{6}out(c, Rname);
(
    {7}!
    {8}in(c, recipient: host);
    {9}in(c, (sauth: authtag,ttpauth: authtag));
    {10}new msgid: messageid;
    {11}let m: bitstring = Message(recipient,msgid,(sauth,ttpauth)) in
    {12}new k: key;
    {13}new qtmp: tquery;
    {14}let q: tquery = getAuthQ(qtmp,sauth) in
    {15}let r: reply = getAuthR(Reply(recipient,qtmp),sauth) in
    {16}let em: bitstring = E(k,m) in
    {17}let hs: key = H((cleartext,q,r,em)) in
    {18}let S2TTP: bitstring = A(TTPEncKey,(Sname,(sauth,ttpauth),(Give,k,recipient,hs))) in
    {19}event Shas(Sname,k,cleartext,q,r,m);
    {20}out(recipient, (TTPname,em,(sauth,ttpauth),cleartext,q,S2TTP));
    {21}!
    {22}in(Sname, inmess4: tcertif);
    {23}if (ttpauth = Auth) then
    (
        {24}let (=Released,=S2TTP,=recipient) = checkS(TTPVerKey,inmess4) in
            {25}event SThinksRhas(m)
        else
            {26}out(Sname, inmess4)
    )
    else
        {27}let (=Released,=S2TTP) = checkS(TTPVerKey,inmess4) in
            {28}event SThinksRhas(m)
        else
            {29}out(Sname, inmess4)
) | (
    {30}!
    0
) | (
    {31}new ChannelToTTP: channel;
    (
        {32}!
        {33}in(c, m_1: bitstring);
        {34}out(ChannelToTTP, m_1)
    ) | (
        {35}!
        {36}new secchannel: channel;
        {37}out(ChannelToTTP, Rname);
        {38}out(ChannelToTTP, secchannel);
        {39}let idTTPtoR: idttpr = id_for_host_ch(Rname,secchannel) in
        {40}let RsecchannelToTTP: channel = channel_with_host(TTPname,secchannel) in
        {41}let RsecchannelFromTTP: channel = channel_with_host(Rname,secchannel) in
        {42}in(Rname, (=TTPname,em2: bitstring,(sauth_1: authtag,ttpauth_1: authtag),cleartext2: bitstring,q2: tquery,S2TTP2: bitstring));
        {43}let r2: reply = getAuthR(Reply(Rname,q2),sauth_1) in
        {44}let hr: key = H((cleartext2,q2,r2,em2)) in
        {45}event Rhas(idTTPtoR,em2,hr);
        {46}out(RsecchannelToTTP, (S2TTP2,(Wants,getAuthP(Rpwd,ttpauth_1),hr)));
        {47}!
        {48}in(RsecchannelFromTTP, (=Try,k3: key,=hr));
        {49}let m3: bitstring = decE(k3,em2) in
        {50}event Rreceived(m3)
    ) | (
        {51}!
        {52}in(ChannelToTTP, receivername: host);
        {53}in(ChannelToTTP, secchannel_1: channel);
        {54}let idTTPtoR_1: idttpr = id_for_host_ch(receivername,secchannel_1) in
        {55}let TTPsecchannelToR: channel = channel_with_host(receivername,secchannel_1) in
        {56}let TTPsecchannelFromR: channel = channel_with_host(TTPname,secchannel_1) in
        {57}in(TTPsecchannelFromR, (S2TTP3: bitstring,(=Wants,RPwd3: passwd,hr3: key)));
        {58}let (Sname3: host,(sauth3: authtag,ttpauth3: authtag),(=Give,k3_1: key,R3: host,=hr3)) = decA(TTPDecKey,S2TTP3) in
        {59}if (R3 = receivername) then
        {60}if ((ttpauth3,R3) = (Auth,PasswdTable(RPwd3))) then
            {61}event TTPSendS(Sname3,S(TTPSigKey,(Released,S2TTP3,R3)));
            {62}event TTPSendR(idTTPtoR_1,(Try,k3_1,hr3));
            {63}out(TTPsecchannelToR, (Try,k3_1,hr3));
            {64}out(Sname3, S(TTPSigKey,(Released,S2TTP3,R3)))
        else
            {65}if (ttpauth3 = NoAuth) then
            {66}event TTPSendS2(Sname3,S(TTPSigKey,(Released,S2TTP3)));
            {67}event TTPSendR2(idTTPtoR_1,(Try,k3_1,hr3));
            {68}out(TTPsecchannelToR, (Try,k3_1,hr3));
            {69}out(Sname3, S(TTPSigKey,(Released,S2TTP3)))
    )
)

Translating the process into Horn clauses...
COMPUTATIONTIME translation to clauses: 0.003037s
NUMBERIMPLIES translation to clauses: 4897
-- Query not attacker(Message(PasswdTable(Rpwd[]),x,z)) in process 0.
Completing...
200 rules inserted. The rule base contains 140 rules. 33 rules in the queue.
400 rules inserted. The rule base contains 163 rules. 35 rules in the queue.
COMPUTATIONTIME completion of rules: 0.036482s
NUMBERIMPLIES completion of rules: 8741
ok, secrecy assumption verified: fact unreachable attacker(TTPDecKey[])
ok, secrecy assumption verified: fact unreachable attacker(TTPSigKey[])
Starting query not attacker(Message(PasswdTable(Rpwd[]),x,z))
goal reachable: attacker(Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))
Abbreviations:
msgid_1 = msgid[ttpauth = NoAuth,sauth = NoAuth,recipient = PasswdTable(Rpwd[]),!1 = @sid]

Derivation:
Abbreviations:
msgid_1 = msgid[ttpauth = NoAuth,sauth = NoAuth,recipient = PasswdTable(Rpwd[]),!1 = @sid]
k_1 = k[ttpauth = NoAuth,sauth = NoAuth,recipient = PasswdTable(Rpwd[]),!1 = @sid]

1. The message PasswdTable(Rpwd[]) may be sent to the attacker at output {6}.
attacker(PasswdTable(Rpwd[])).

2. Using the function NoAuth the attacker may obtain NoAuth.
attacker(NoAuth).

3. By 2, the attacker may know NoAuth.
By 2, the attacker may know NoAuth.
Using the function 2-tuple the attacker may obtain (NoAuth,NoAuth).
attacker((NoAuth,NoAuth)).

4. The message PasswdTable(Rpwd[]) that the attacker may have by 1 may be received at input {8}.
The message (NoAuth,NoAuth) that the attacker may have by 3 may be received at input {9}.
So the message (TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))),(NoAuth,NoAuth),cleartext[],NullQ,A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))))) may be sent on channel PasswdTable(Rpwd[]) at output {20}.
mess(PasswdTable(Rpwd[]),(TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))),(NoAuth,NoAuth),cleartext[],NullQ,A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))))).

5. By 1, the attacker may have the channel PasswdTable(Rpwd[]).
By 4, the message (TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))),(NoAuth,NoAuth),cleartext[],NullQ,A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))))) may be sent on this channel.
So the attacker may obtain the message (TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))),(NoAuth,NoAuth),cleartext[],NullQ,A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))))) by listening on this channel.
attacker((TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))),(NoAuth,NoAuth),cleartext[],NullQ,A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))))).

6. By 5, the attacker may know (TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))),(NoAuth,NoAuth),cleartext[],NullQ,A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))))).
Using the function 2-proj-6-tuple the attacker may obtain E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))).
attacker(E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))).

7. The attacker has some term secchannel_2.
attacker(secchannel_2).

8. By 1, the attacker may know PasswdTable(Rpwd[]).
By 7, the attacker may know secchannel_2.
Using the function channel_with_host the attacker may obtain channel_with_host(PasswdTable(Rpwd[]),secchannel_2).
attacker(channel_with_host(PasswdTable(Rpwd[]),secchannel_2)).

9. The message PasswdTable(Rpwd[]) that the attacker may have by 1 may be received at input {33}.
So the message PasswdTable(Rpwd[]) may be sent on channel ChannelToTTP[] at output {34}.
mess(ChannelToTTP[],PasswdTable(Rpwd[])).

10. The message secchannel_2 that the attacker may have by 7 may be received at input {33}.
So the message secchannel_2 may be sent on channel ChannelToTTP[] at output {34}.
mess(ChannelToTTP[],secchannel_2).

11. Using the function NullR the attacker may obtain NullR.
attacker(NullR).

12. Using the function NullQ the attacker may obtain NullQ.
attacker(NullQ).

13. The attacker initially knows cleartext[].
attacker(cleartext[]).

14. By 13, the attacker may know cleartext[].
By 12, the attacker may know NullQ.
By 11, the attacker may know NullR.
By 6, the attacker may know E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))).
Using the function 4-tuple the attacker may obtain (cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))).
attacker((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))).

15. By 14, the attacker may know (cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))).
Using the function H the attacker may obtain H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))).
attacker(H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))).

16. The attacker has some term RPwd3_1.
attacker(RPwd3_1).

17. Using the function Wants the attacker may obtain Wants.
attacker(Wants).

18. By 17, the attacker may know Wants.
By 16, the attacker may know RPwd3_1.
By 15, the attacker may know H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))).
Using the function 3-tuple the attacker may obtain (Wants,RPwd3_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))).
attacker((Wants,RPwd3_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))).

19. By 5, the attacker may know (TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))),(NoAuth,NoAuth),cleartext[],NullQ,A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))))).
Using the function 6-proj-6-tuple the attacker may obtain A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))).
attacker(A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))))).

20. By 19, the attacker may know A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))).
By 18, the attacker may know (Wants,RPwd3_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))).
Using the function 2-tuple the attacker may obtain (A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))),(Wants,RPwd3_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))).
attacker((A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))),(Wants,RPwd3_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))).

21. The attacker initially knows TTPname[].
attacker(TTPname[]).

22. By 21, the attacker may know TTPname[].
By 7, the attacker may know secchannel_2.
Using the function channel_with_host the attacker may obtain channel_with_host(TTPname[],secchannel_2).
attacker(channel_with_host(TTPname[],secchannel_2)).

23. By 22, the attacker may have the channel channel_with_host(TTPname[],secchannel_2).
By 20, the attacker may have the message (A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))),(Wants,RPwd3_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))).
So the attacker may send this message on this channel.
mess(channel_with_host(TTPname[],secchannel_2),(A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))),(Wants,RPwd3_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))).

24. The message PasswdTable(Rpwd[]) that may be sent on channel ChannelToTTP[] by 9 may be received at input {52}.
The message secchannel_2 that may be sent on channel ChannelToTTP[] by 10 may be received at input {53}.
The message (A(pk(TTPDecKey[]),(Sname[],(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))))),(Wants,RPwd3_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))) that may be sent on channel channel_with_host(TTPname[],secchannel_2) by 23 may be received at input {57}.
So the message (Try,k_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))) may be sent on channel channel_with_host(PasswdTable(Rpwd[]),secchannel_2) at output {68}.
mess(channel_with_host(PasswdTable(Rpwd[]),secchannel_2),(Try,k_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))).

25. By 8, the attacker may have the channel channel_with_host(PasswdTable(Rpwd[]),secchannel_2).
By 24, the message (Try,k_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))) may be sent on this channel.
So the attacker may obtain the message (Try,k_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))) by listening on this channel.
attacker((Try,k_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))))))).

26. By 25, the attacker may know (Try,k_1,H((cleartext[],NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)))))).
Using the function 2-proj-3-tuple the attacker may obtain k_1.
attacker(k_1).

27. By 26, the attacker may know k_1.
By 6, the attacker may know E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))).
Using the function decE the attacker may obtain Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth)).
attacker(Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))).

28. By 27, attacker(Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))).
The goal is reached, represented in the following fact:
attacker(Message(PasswdTable(Rpwd[]),msgid_1,(NoAuth,NoAuth))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(c, ~M) with ~M = pk(TTPDecKey) at {2}

out(c, ~M_1) with ~M_1 = Spk(TTPSigKey) at {4}

out(c, ~M_2) with ~M_2 = PasswdTable(Rpwd) at {6}

new ChannelToTTP: channel creating ChannelToTTP_1 at {31}

in(c, ~M_2) with ~M_2 = PasswdTable(Rpwd) at {8} in copy a

in(c, (NoAuth,NoAuth)) at {9} in copy a

new msgid: messageid creating msgid_1 at {10} in copy a

new k: key creating k_1 at {12} in copy a

new qtmp: tquery creating qtmp_1 at {13} in copy a

event Shas(Sname,k_1,cleartext,NullQ,NullR,Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth))) at {19} in copy a

out(PasswdTable(Rpwd), (~M_3,~M_4,(NoAuth,NoAuth),~M_5,NullQ,~M_6)) with ~M_3 = TTPname, ~M_4 = E(k_1,Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth))), ~M_5 = cleartext, ~M_6 = A(pk(TTPDecKey),(Sname,(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd),H((cleartext,NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth)))))))) at {20} in copy a

in(c, a_1) at {33} in copy a_2

in(c, ~M_2) with ~M_2 = PasswdTable(Rpwd) at {33} in copy a_3

out(ChannelToTTP_1, PasswdTable(Rpwd)) at {34} in copy a_3 received at {52} in copy a_4

out(ChannelToTTP_1, a_1) at {34} in copy a_2 received at {53} in copy a_4

in(channel_with_host(TTPname,a_1), (~M_6,(Wants,a_5,H((cleartext,NullQ,NullR,~M_4))))) with ~M_6 = A(pk(TTPDecKey),(Sname,(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd),H((cleartext,NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth)))))))), H((cleartext,NullQ,NullR,~M_4)) = H((cleartext,NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth))))) at {57} in copy a_4

event TTPSendS2(Sname,S(TTPSigKey,(Released,A(pk(TTPDecKey),(Sname,(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd),H((cleartext,NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth))))))))))) at {66} in copy a_4

event TTPSendR2(id_for_host_ch(PasswdTable(Rpwd),a_1),(Try,k_1,H((cleartext,NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth))))))) at {67} in copy a_4

out(channel_with_host(PasswdTable(Rpwd),a_1), (Try,~M_7,~M_8)) with ~M_7 = k_1, ~M_8 = H((cleartext,NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth))))) at {68} in copy a_4

out(Sname, ~M_9) with ~M_9 = S(TTPSigKey,(Released,A(pk(TTPDecKey),(Sname,(NoAuth,NoAuth),(Give,k_1,PasswdTable(Rpwd),H((cleartext,NullQ,NullR,E(k_1,Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth)))))))))) at {69} in copy a_4

The attacker has the message decE(~M_7,~M_4) = Message(PasswdTable(Rpwd),msgid_1,(NoAuth,NoAuth)).
A trace has been found.
RESULT not attacker(Message(PasswdTable(Rpwd[]),x,z)) is false.
COMPUTATIONTIME solving_queries (include completion): 0.038051s
NUMBERIMPLIES solving_queries (include completion): 763

--------------------------------------------------------------
Verification summary:

Query not attacker(Message(PasswdTable(Rpwd[]),x,z)) is false.

--------------------------------------------------------------

