Process 0 (that is, the initial process):
{1}let TTPEncKey: pkey = pk(TTPDecKey) in
{2}out(c, TTPEncKey);
{3}let TTPVerKey: spkey = Spk(TTPSigKey) in
{4}out(c, TTPVerKey);
{5}let Rname: host = PasswdTable(Rpwd) in
{6}out(c, Rname);
(
    {7}!
    0
) | (
    {8}!
    {9}in(Judgename, (certif: tcertif,Sname5: host,k5: key,cleartext5: bitstring,q5: tquery,r5: reply,em5: bitstring));
    {10}let (=Released,S2TTP5: bitstring,Rname5: host) = checkS(TTPVerKey,certif) in
    {11}let m5: bitstring = decE(k5,em5) in
    {12}let hs5: key = H((cleartext5,q5,r5,em5)) in
    {13}if (S2TTP5 = A(TTPEncKey,(Sname5,(Auth,Auth),(Give,k5,Rname5,hs5)))) then
        {14}event JudgeSays(Received,Rname5,m5)
    else
        {15}if (S2TTP5 = A(TTPEncKey,(Sname5,(NoAuth,Auth),(Give,k5,Rname5,hs5)))) then
        {16}event JudgeSays(Received,Rname5,m5)
) | (
    {17}!
    {18}new shkey: key;
    {19}out(TTPname, Rname);
    {20}out(TTPname, A(TTPEncKey,(ChKey,shkey)));
    {21}let idTTPtoR: idttpr = id_for_key(shkey) in
    {22}new RsecchannelToTTP: channel;
    {23}new RsecchannelFromTTP: channel;
    (
        {24}!
        {25}in(RsecchannelToTTP, m: bitstring);
        {26}out(TTPname, E(shkey,m))
    ) | (
        {27}!
        {28}in(Rname, mR: bitstring);
        {29}out(RsecchannelFromTTP, decE(shkey,mR))
    ) | (
        {30}in(Rname, (=TTPname,em2: bitstring,(sauth: authtag,ttpauth: authtag),cleartext2: bitstring,q2: tquery,S2TTP2: bitstring));
        {31}let r2: reply = getAuthR(Reply(Rname,q2),sauth) in
        {32}let hr: key = H((cleartext2,q2,r2,em2)) in
        {33}event Rhas(idTTPtoR,em2,hr);
        {34}out(RsecchannelToTTP, (S2TTP2,(Wants,getAuthP(Rpwd,ttpauth),hr)));
        {35}!
        {36}in(RsecchannelFromTTP, (=Try,k3: key,=hr));
        {37}let m3: bitstring = decE(k3,em2) in
        {38}event Rreceived(m3)
    )
) | (
    {39}!
    {40}in(TTPname, receivername: host);
    {41}in(TTPname, m1: bitstring);
    {42}let (=ChKey,shkey_1: key) = decA(TTPDecKey,m1) in
    {43}let idTTPtoR_1: idttpr = id_for_key(shkey_1) in
    {44}new TTPsecchannelToR: channel;
    {45}new TTPsecchannelFromR: channel;
    (
        {46}!
        {47}in(TTPsecchannelToR, m_1: bitstring);
        {48}out(receivername, E(shkey_1,m_1))
    ) | (
        {49}!
        {50}in(TTPname, mTTP: bitstring);
        {51}out(TTPsecchannelFromR, decE(shkey_1,mTTP))
    ) | (
        {52}in(TTPsecchannelFromR, (S2TTP3: bitstring,(=Wants,RPwd3: passwd,hr3: key)));
        {53}let (Sname3: host,(sauth3: authtag,ttpauth3: authtag),(=Give,k3_1: key,R3: host,=hr3)) = decA(TTPDecKey,S2TTP3) in
        {54}if (R3 = receivername) then
        {55}if ((ttpauth3,R3) = (Auth,PasswdTable(RPwd3))) then
            {56}event TTPSendS(Sname3,S(TTPSigKey,(Released,S2TTP3,R3)));
            {57}event TTPSendR(idTTPtoR_1,(Try,k3_1,hr3));
            {58}out(TTPsecchannelToR, (Try,k3_1,hr3));
            {59}out(Sname3, S(TTPSigKey,(Released,S2TTP3,R3)))
        else
            {60}if (ttpauth3 = NoAuth) then
            {61}event TTPSendS2(Sname3,S(TTPSigKey,(Released,S2TTP3)));
            {62}event TTPSendR2(idTTPtoR_1,(Try,k3_1,hr3));
            {63}out(TTPsecchannelToR, (Try,k3_1,hr3));
            {64}out(Sname3, S(TTPSigKey,(Released,S2TTP3)))
    )
)

Translating the process into Horn clauses...
COMPUTATIONTIME translation to clauses: 0.002492s
NUMBERIMPLIES translation to clauses: 6194
-- Query putbegin event:Rhas,TTPSendR; not event(JudgeSays(Received,PasswdTable(Rpwd[]),x)) in process 0.
Completing...
200 rules inserted. The rule base contains 167 rules. 12 rules in the queue.
COMPUTATIONTIME completion of rules: 0.013577s
NUMBERIMPLIES completion of rules: 4791
ok, secrecy assumption verified: fact unreachable attacker(TTPDecKey[])
ok, secrecy assumption verified: fact unreachable attacker(TTPSigKey[])
Starting query not event(JudgeSays(Received,PasswdTable(Rpwd[]),x))
goal reachable: begin(TTPSendR(id_for_key(shkey_2),(Try,y,H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))) && begin(Rhas(id_for_key(shkey_2),E(y,x),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))) && attacker(cleartext5_1) && attacker(q5_1) && attacker(y) && attacker(x) -> end(JudgeSays(Received,PasswdTable(Rpwd[]),x))
Abbreviations:
shkey_2 = shkey[!1 = @sid]

Derivation:
Abbreviations:
shkey_2 = shkey[!1 = @sid]
TTPsecchannelFromR_1 = TTPsecchannelFromR[m1 = A(pk(TTPDecKey[]),(ChKey,shkey_2)),receivername = PasswdTable(Rpwd[]),!1 = @sid_1]
RsecchannelToTTP_1 = RsecchannelToTTP[!1 = @sid]

1. We assume as hypothesis that
attacker(x).

2. We assume as hypothesis that
attacker(y).

3. By 2, the attacker may know y.
By 1, the attacker may know x.
Using the function E the attacker may obtain E(y,x).
attacker(E(y,x)).

4. We assume as hypothesis that
attacker(q5_1).

5. The message PasswdTable(Rpwd[]) may be sent to the attacker at output {6}.
attacker(PasswdTable(Rpwd[])).

6. By 5, the attacker may know PasswdTable(Rpwd[]).
By 4, the attacker may know q5_1.
Using the function Reply the attacker may obtain Reply(PasswdTable(Rpwd[]),q5_1).
attacker(Reply(PasswdTable(Rpwd[]),q5_1)).

7. We assume as hypothesis that
attacker(cleartext5_1).

8. The attacker has some term Sname5_1.
attacker(Sname5_1).

9. The message A(pk(TTPDecKey[]),(ChKey,shkey_2)) may be sent to the attacker at output {20}.
attacker(A(pk(TTPDecKey[]),(ChKey,shkey_2))).

10. By 7, the attacker may know cleartext5_1.
By 4, the attacker may know q5_1.
By 6, the attacker may know Reply(PasswdTable(Rpwd[]),q5_1).
By 3, the attacker may know E(y,x).
Using the function 4-tuple the attacker may obtain (cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)).
attacker((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))).

11. By 10, the attacker may know (cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)).
Using the function H the attacker may obtain H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))).
attacker(H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))).

12. Using the function Give the attacker may obtain Give.
attacker(Give).

13. By 12, the attacker may know Give.
By 2, the attacker may know y.
By 5, the attacker may know PasswdTable(Rpwd[]).
By 11, the attacker may know H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))).
Using the function 4-tuple the attacker may obtain (Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))).
attacker((Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))).

14. Using the function Auth the attacker may obtain Auth.
attacker(Auth).

15. Using the function NoAuth the attacker may obtain NoAuth.
attacker(NoAuth).

16. By 15, the attacker may know NoAuth.
By 14, the attacker may know Auth.
Using the function 2-tuple the attacker may obtain (NoAuth,Auth).
attacker((NoAuth,Auth)).

17. By 8, the attacker may know Sname5_1.
By 16, the attacker may know (NoAuth,Auth).
By 13, the attacker may know (Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))).
Using the function 3-tuple the attacker may obtain (Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))).
attacker((Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))).

18. The message pk(TTPDecKey[]) may be sent to the attacker at output {2}.
attacker(pk(TTPDecKey[])).

19. By 18, the attacker may know pk(TTPDecKey[]).
By 17, the attacker may know (Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))).
Using the function A the attacker may obtain A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))).
attacker(A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))))).

20. By 14, the attacker may know Auth.
By 14, the attacker may know Auth.
Using the function 2-tuple the attacker may obtain (Auth,Auth).
attacker((Auth,Auth)).

21. The attacker initially knows TTPname[].
attacker(TTPname[]).

22. By 21, the attacker may know TTPname[].
By 3, the attacker may know E(y,x).
By 20, the attacker may know (Auth,Auth).
By 7, the attacker may know cleartext5_1.
By 4, the attacker may know q5_1.
By 19, the attacker may know A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))).
Using the function 6-tuple the attacker may obtain (TTPname[],E(y,x),(Auth,Auth),cleartext5_1,q5_1,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))))).
attacker((TTPname[],E(y,x),(Auth,Auth),cleartext5_1,q5_1,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))))).

23. By 5, the attacker may have the channel PasswdTable(Rpwd[]).
By 22, the attacker may have the message (TTPname[],E(y,x),(Auth,Auth),cleartext5_1,q5_1,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))))).
So the attacker may send this message on this channel.
mess(PasswdTable(Rpwd[]),(TTPname[],E(y,x),(Auth,Auth),cleartext5_1,q5_1,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))))).

24. The message (TTPname[],E(y,x),(Auth,Auth),cleartext5_1,q5_1,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))))) that may be sent on channel PasswdTable(Rpwd[]) by 23 may be received at input {30}.
The event Rhas(id_for_key(shkey_2),E(y,x),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))) may be executed at {33}.
So the message (A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),(Wants,Rpwd[],H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))) may be sent on channel RsecchannelToTTP_1 at output {34}.
mess(RsecchannelToTTP_1,(A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),(Wants,Rpwd[],H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))).

25. The message (A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),(Wants,Rpwd[],H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))) that may be sent on channel RsecchannelToTTP_1 by 24 may be received at input {25}.
So the message E(shkey_2,(A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),(Wants,Rpwd[],H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))) may be sent to the attacker at output {26}.
attacker(E(shkey_2,(A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),(Wants,Rpwd[],H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))))).

26. The message PasswdTable(Rpwd[]) that the attacker may have by 5 may be received at input {40}.
The message A(pk(TTPDecKey[]),(ChKey,shkey_2)) that the attacker may have by 9 may be received at input {41}.
The message E(shkey_2,(A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),(Wants,Rpwd[],H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))) that the attacker may have by 25 may be received at input {50}.
So the message (A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),(Wants,Rpwd[],H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))) may be sent on channel TTPsecchannelFromR_1 at output {51}.
mess(TTPsecchannelFromR_1,(A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),(Wants,Rpwd[],H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))).

27. The message PasswdTable(Rpwd[]) that the attacker may have by 5 may be received at input {40}.
The message A(pk(TTPDecKey[]),(ChKey,shkey_2)) that the attacker may have by 9 may be received at input {41}.
The message (A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),(Wants,Rpwd[],H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))) that may be sent on channel TTPsecchannelFromR_1 by 26 may be received at input {52}.
The event TTPSendR(id_for_key(shkey_2),(Try,y,H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))))) may be executed at {57}.
So the message S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),PasswdTable(Rpwd[]))) may be sent on channel Sname5_1 at output {59}.
mess(Sname5_1,S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),PasswdTable(Rpwd[])))).

28. By 8, the attacker may have the channel Sname5_1.
By 27, the message S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),PasswdTable(Rpwd[]))) may be sent on this channel.
So the attacker may obtain the message S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),PasswdTable(Rpwd[]))) by listening on this channel.
attacker(S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),PasswdTable(Rpwd[])))).

29. By 28, the attacker may know S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),PasswdTable(Rpwd[]))).
By 8, the attacker may know Sname5_1.
By 2, the attacker may know y.
By 7, the attacker may know cleartext5_1.
By 4, the attacker may know q5_1.
By 6, the attacker may know Reply(PasswdTable(Rpwd[]),q5_1).
By 3, the attacker may know E(y,x).
Using the function 7-tuple the attacker may obtain (S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),PasswdTable(Rpwd[]))),Sname5_1,y,cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)).
attacker((S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),PasswdTable(Rpwd[]))),Sname5_1,y,cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x))).

30. The message (S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname5_1,(NoAuth,Auth),(Give,y,PasswdTable(Rpwd[]),H((cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)))))),PasswdTable(Rpwd[]))),Sname5_1,y,cleartext5_1,q5_1,Reply(PasswdTable(Rpwd[]),q5_1),E(y,x)) that the attacker may have by 29 may be received at input {9}.
So event JudgeSays(Received,PasswdTable(Rpwd[]),x) may be executed at {16}.
end(JudgeSays(Received,PasswdTable(Rpwd[]),x)).

31. By 30, end(JudgeSays(Received,PasswdTable(Rpwd[]),x)).
The goal is reached, represented in the following fact:
end(JudgeSays(Received,PasswdTable(Rpwd[]),x)).


Could not find a trace corresponding to this derivation.
RESULT not event(JudgeSays(Received,PasswdTable(Rpwd[]),x)) cannot be proved.
COMPUTATIONTIME solving_queries (include completion): 0.017713s
NUMBERIMPLIES solving_queries (include completion): 1208

--------------------------------------------------------------
Verification summary:

Query not event(JudgeSays(Received,PasswdTable(Rpwd[]),x)) cannot be proved.

--------------------------------------------------------------

