Process 0 (that is, the initial process):
{1}let TTPEncKey: pkey = pk(TTPDecKey) in
{2}out(c, TTPEncKey);
{3}let TTPVerKey: spkey = Spk(TTPSigKey) in
{4}out(c, TTPVerKey);
{5}let Rname: host = PasswdTable(Rpwd) in
{6}out(c, Rname);
(
    {7}!
    {8}in(c, recipient: host);
    {9}in(c, (sauth: authtag,ttpauth: authtag));
    {10}new msgid: messageid;
    {11}let m: bitstring = Message(recipient,msgid,(sauth,ttpauth)) in
    {12}new k: key;
    {13}new qtmp: tquery;
    {14}let q: tquery = getAuthQ(qtmp,sauth) in
    {15}let r: reply = getAuthR(Reply(recipient,qtmp),sauth) in
    {16}let em: bitstring = E(k,m) in
    {17}let hs: key = H((cleartext,q,r,em)) in
    {18}let S2TTP: bitstring = A(TTPEncKey,(Sname,(sauth,ttpauth),(Give,k,recipient,hs))) in
    {19}event Shas(Sname,k,cleartext,q,r,m);
    {20}out(recipient, (TTPname,em,(sauth,ttpauth),cleartext,q,S2TTP));
    {21}!
    {22}in(Sname, inmess4: tcertif);
    {23}if (ttpauth = Auth) then
    (
        {24}let (=Released,=S2TTP,=recipient) = checkS(TTPVerKey,inmess4) in
            {25}event SThinksRhas(m);
            {26}out(Judgename, (inmess4,Sname,k,cleartext,q,r,em))
        else
            {27}out(Sname, inmess4)
    )
    else
        {28}let (=Released,=S2TTP) = checkS(TTPVerKey,inmess4) in
            {29}event SThinksRhas(m)
        else
            {30}out(Sname, inmess4)
) | (
    {31}!
    0
) | (
    {32}new ChannelToTTP: channel;
    (
        {33}!
        {34}in(c, m_1: bitstring);
        {35}out(ChannelToTTP, m_1)
    ) | (
        {36}!
        {37}new secchannel: channel;
        {38}out(ChannelToTTP, Rname);
        {39}out(ChannelToTTP, secchannel);
        {40}let idTTPtoR: idttpr = id_for_host_ch(Rname,secchannel) in
        {41}let RsecchannelToTTP: channel = channel_with_host(TTPname,secchannel) in
        {42}let RsecchannelFromTTP: channel = channel_with_host(Rname,secchannel) in
        {43}in(Rname, (=TTPname,em2: bitstring,(sauth_1: authtag,ttpauth_1: authtag),cleartext2: bitstring,q2: tquery,S2TTP2: bitstring));
        {44}let r2: reply = getAuthR(Reply(Rname,q2),sauth_1) in
        {45}let hr: key = H((cleartext2,q2,r2,em2)) in
        {46}event Rhas(idTTPtoR,em2,hr);
        {47}out(RsecchannelToTTP, (S2TTP2,(Wants,getAuthP(Rpwd,ttpauth_1),hr)));
        {48}!
        {49}in(RsecchannelFromTTP, (=Try,k3: key,=hr));
        {50}let m3: bitstring = decE(k3,em2) in
        {51}event Rreceived(m3)
    ) | (
        {52}!
        {53}in(ChannelToTTP, receivername: host);
        {54}in(ChannelToTTP, secchannel_1: channel);
        {55}let idTTPtoR_1: idttpr = id_for_host_ch(receivername,secchannel_1) in
        {56}let TTPsecchannelToR: channel = channel_with_host(receivername,secchannel_1) in
        {57}let TTPsecchannelFromR: channel = channel_with_host(TTPname,secchannel_1) in
        {58}in(TTPsecchannelFromR, (S2TTP3: bitstring,(=Wants,RPwd3: passwd,hr3: key)));
        {59}let (Sname3: host,(sauth3: authtag,ttpauth3: authtag),(=Give,k3_1: key,R3: host,=hr3)) = decA(TTPDecKey,S2TTP3) in
        {60}if (R3 = receivername) then
        {61}if ((ttpauth3,R3) = (Auth,PasswdTable(RPwd3))) then
            {62}event TTPSendS(Sname3,S(TTPSigKey,(Released,S2TTP3,R3)));
            {63}event TTPSendR(idTTPtoR_1,(Try,k3_1,hr3));
            {64}out(TTPsecchannelToR, (Try,k3_1,hr3));
            {65}out(Sname3, S(TTPSigKey,(Released,S2TTP3,R3)))
        else
            {66}if (ttpauth3 = NoAuth) then
            {67}event TTPSendS2(Sname3,S(TTPSigKey,(Released,S2TTP3)));
            {68}event TTPSendR2(idTTPtoR_1,(Try,k3_1,hr3));
            {69}out(TTPsecchannelToR, (Try,k3_1,hr3));
            {70}out(Sname3, S(TTPSigKey,(Released,S2TTP3)))
    )
)

Translating the process into Horn clauses...
COMPUTATIONTIME translation to clauses: 0.002809s
NUMBERIMPLIES translation to clauses: 6121
-- Query putbegin event:Rhas,TTPSendR,TTPSendR2; not event(SThinksRhas(Message(PasswdTable(Rpwd[]),y,(Auth,z)))) in process 0.
Completing...
200 rules inserted. The rule base contains 153 rules. 43 rules in the queue.
400 rules inserted. The rule base contains 183 rules. 80 rules in the queue.
600 rules inserted. The rule base contains 232 rules. 63 rules in the queue.
800 rules inserted. The rule base contains 291 rules. 10 rules in the queue.
COMPUTATIONTIME completion of rules: 0.124101s
NUMBERIMPLIES completion of rules: 17365
ok, secrecy assumption verified: fact unreachable attacker(TTPDecKey[])
ok, secrecy assumption verified: fact unreachable attacker(TTPSigKey[])
Starting query not event(SThinksRhas(Message(PasswdTable(Rpwd[]),y,(Auth,z))))
goal reachable: begin(TTPSendR(id_for_host_ch(PasswdTable(Rpwd[]),secchannel_2),(Try,k_1,H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))) && begin(Rhas(id_for_host_ch(PasswdTable(Rpwd[]),secchannel_2),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))))))) -> end(SThinksRhas(Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))))
Abbreviations:
msgid_1 = msgid[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(Rpwd[]),!1 = @sid]
secchannel_2 = secchannel[!1 = @sid_1]
k_1 = k[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(Rpwd[]),!1 = @sid]
qtmp_1 = qtmp[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(Rpwd[]),!1 = @sid]

Derivation:
Abbreviations:
msgid_1 = msgid[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(Rpwd[]),!1 = @sid]
k_1 = k[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(Rpwd[]),!1 = @sid]
qtmp_1 = qtmp[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(Rpwd[]),!1 = @sid]
secchannel_2 = secchannel[!1 = @sid_1]

1. The message PasswdTable(Rpwd[]) may be sent to the attacker at output {6}.
attacker(PasswdTable(Rpwd[])).

2. Using the function Auth the attacker may obtain Auth.
attacker(Auth).

3. By 2, the attacker may know Auth.
By 2, the attacker may know Auth.
Using the function 2-tuple the attacker may obtain (Auth,Auth).
attacker((Auth,Auth)).

4. The attacker initially knows Sname[].
attacker(Sname[]).

5. The message PasswdTable(Rpwd[]) that the attacker may have by 1 may be received at input {34}.
So the message PasswdTable(Rpwd[]) may be sent on channel ChannelToTTP[] at output {35}.
mess(ChannelToTTP[],PasswdTable(Rpwd[])).

6. The message secchannel_2 may be sent on channel ChannelToTTP[] at output {39}.
mess(ChannelToTTP[],secchannel_2).

7. The message PasswdTable(Rpwd[]) that the attacker may have by 1 may be received at input {8}.
The message (Auth,Auth) that the attacker may have by 3 may be received at input {9}.
So the message (TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))))))))) may be sent on channel PasswdTable(Rpwd[]) at output {20}.
mess(PasswdTable(Rpwd[]),(TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))))).

8. The message (TTPname[],E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))))))))) that may be sent on channel PasswdTable(Rpwd[]) by 7 may be received at input {43}.
The event Rhas(id_for_host_ch(PasswdTable(Rpwd[]),secchannel_2),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))) may be executed at {46}.
So the message (A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))),(Wants,Rpwd[],H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))))))) may be sent on channel channel_with_host(TTPname[],secchannel_2) at output {47}.
mess(channel_with_host(TTPname[],secchannel_2),(A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))),(Wants,Rpwd[],H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))).

9. The message PasswdTable(Rpwd[]) that may be sent on channel ChannelToTTP[] by 5 may be received at input {53}.
The message secchannel_2 that may be sent on channel ChannelToTTP[] by 6 may be received at input {54}.
The message (A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))),(Wants,Rpwd[],H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))))))) that may be sent on channel channel_with_host(TTPname[],secchannel_2) by 8 may be received at input {58}.
The event TTPSendR(id_for_host_ch(PasswdTable(Rpwd[]),secchannel_2),(Try,k_1,H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))))))) may be executed at {63}.
So the message S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))),PasswdTable(Rpwd[]))) may be sent on channel Sname[] at output {65}.
mess(Sname[],S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))),PasswdTable(Rpwd[])))).

10. By 4, the attacker may have the channel Sname[].
By 9, the message S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))),PasswdTable(Rpwd[]))) may be sent on this channel.
So the attacker may obtain the message S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))),PasswdTable(Rpwd[]))) by listening on this channel.
attacker(S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))),PasswdTable(Rpwd[])))).

11. The message PasswdTable(Rpwd[]) that the attacker may have by 1 may be received at input {8}.
The message (Auth,Auth) that the attacker may have by 3 may be received at input {9}.
The message S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(Rpwd[]),H((cleartext[],qtmp_1,Reply(PasswdTable(Rpwd[]),qtmp_1),E(k_1,Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))))))),PasswdTable(Rpwd[]))) that the attacker may have by 10 may be received at input {22}.
So event SThinksRhas(Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth))) may be executed at {25}.
end(SThinksRhas(Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))).

12. By 11, end(SThinksRhas(Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))).
The goal is reached, represented in the following fact:
end(SThinksRhas(Message(PasswdTable(Rpwd[]),msgid_1,(Auth,Auth)))).


Could not find a trace corresponding to this derivation.
RESULT not event(SThinksRhas(Message(PasswdTable(Rpwd[]),y,(Auth,z)))) cannot be proved.
COMPUTATIONTIME solving_queries (include completion): 0.127091s
NUMBERIMPLIES solving_queries (include completion): 1565

--------------------------------------------------------------
Verification summary:

Query not event(SThinksRhas(Message(PasswdTable(Rpwd[]),y,(Auth,z)))) cannot be proved.

--------------------------------------------------------------

