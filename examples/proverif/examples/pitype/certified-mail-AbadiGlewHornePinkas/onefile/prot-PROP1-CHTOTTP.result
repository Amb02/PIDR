Process 0 (that is, the initial process):
{1}let TTPEncKey: pkey = pk(TTPDecKey) in
{2}out(c, TTPEncKey);
{3}let TTPVerKey: spkey = Spk(TTPSigKey) in
{4}out(c, TTPVerKey);
{5}let Rname: host = PasswdTable(Rpwd) in
{6}out(c, Rname);
(
    {7}!
    {8}in(c, recipient: host);
    {9}in(c, (sauth: authtag,ttpauth: authtag));
    {10}new msgid: messageid;
    {11}let m: bitstring = Message(recipient,msgid,(sauth,ttpauth)) in
    {12}new k: key;
    {13}new qtmp: tquery;
    {14}let q: tquery = getAuthQ(qtmp,sauth) in
    {15}let r: reply = getAuthR(Reply(recipient,qtmp),sauth) in
    {16}let em: bitstring = E(k,m) in
    {17}let hs: key = H((cleartext,q,r,em)) in
    {18}let S2TTP: bitstring = A(TTPEncKey,(Sname,(sauth,ttpauth),(Give,k,recipient,hs))) in
    {19}event Shas(Sname,k,cleartext,q,r,m);
    {20}out(recipient, (TTPname,em,(sauth,ttpauth),cleartext,q,S2TTP));
    {21}!
    {22}in(Sname, inmess4: tcertif);
    {23}if (ttpauth = Auth) then
    (
        {24}let (=Released,=S2TTP,=recipient) = checkS(TTPVerKey,inmess4) in
            {25}event SThinksRhas(m);
            {26}out(Judgename, (inmess4,Sname,k,cleartext,q,r,em))
        else
            {27}out(Sname, inmess4)
    )
    else
        {28}let (=Released,=S2TTP) = checkS(TTPVerKey,inmess4) in
            {29}event SThinksRhas(m)
        else
            {30}out(Sname, inmess4)
) | (
    {31}!
    {32}in(Judgename, (certif: tcertif,Sname5: host,k5: key,cleartext5: bitstring,q5: tquery,r5: reply,em5: bitstring));
    {33}let (=Released,S2TTP5: bitstring,Rname5: host) = checkS(TTPVerKey,certif) in
    {34}let m5: bitstring = decE(k5,em5) in
    {35}let hs5: key = H((cleartext5,q5,r5,em5)) in
    {36}if (S2TTP5 = A(TTPEncKey,(Sname5,(Auth,Auth),(Give,k5,Rname5,hs5)))) then
        {37}event JudgeSays(Received,Rname5,m5)
    else
        {38}if (S2TTP5 = A(TTPEncKey,(Sname5,(NoAuth,Auth),(Give,k5,Rname5,hs5)))) then
        {39}event JudgeSays(Received,Rname5,m5)
) | (
    {40}new ChannelToTTP: channel;
    (
        {41}!
        {42}in(c, m_1: bitstring);
        {43}out(ChannelToTTP, m_1)
    ) | (
        {44}!
        {45}new secchannel: channel;
        {46}out(ChannelToTTP, Rname);
        {47}out(ChannelToTTP, secchannel);
        {48}let idTTPtoR: idttpr = id_for_host_ch(Rname,secchannel) in
        {49}let RsecchannelToTTP: channel = channel_with_host(TTPname,secchannel) in
        {50}let RsecchannelFromTTP: channel = channel_with_host(Rname,secchannel) in
        {51}out(c, RsecchannelToTTP);
        {52}out(c, RsecchannelFromTTP);
        (
            {53}out(c, Rpwd)
        ) | (
            {54}in(c, m_2: bitstring);
            {55}event Rreceived(m_2)
        )
    ) | (
        {56}!
        {57}in(ChannelToTTP, receivername: host);
        {58}in(ChannelToTTP, secchannel_1: channel);
        {59}let idTTPtoR_1: idttpr = id_for_host_ch(receivername,secchannel_1) in
        {60}let TTPsecchannelToR: channel = channel_with_host(receivername,secchannel_1) in
        {61}let TTPsecchannelFromR: channel = channel_with_host(TTPname,secchannel_1) in
        {62}in(TTPsecchannelFromR, (S2TTP3: bitstring,(=Wants,RPwd3: passwd,hr3: key)));
        {63}let (Sname3: host,(sauth3: authtag,ttpauth3: authtag),(=Give,k3: key,R3: host,=hr3)) = decA(TTPDecKey,S2TTP3) in
        {64}if (R3 = receivername) then
        {65}if ((ttpauth3,R3) = (Auth,PasswdTable(RPwd3))) then
            {66}event TTPSendS(Sname3,S(TTPSigKey,(Released,S2TTP3,R3)));
            {67}event TTPSendR(idTTPtoR_1,(Try,k3,hr3));
            {68}out(TTPsecchannelToR, (Try,k3,hr3));
            {69}out(Sname3, S(TTPSigKey,(Released,S2TTP3,R3)))
        else
            {70}if (ttpauth3 = NoAuth) then
            {71}event TTPSendS2(Sname3,S(TTPSigKey,(Released,S2TTP3)));
            {72}event TTPSendR2(idTTPtoR_1,(Try,k3,hr3));
            {73}out(TTPsecchannelToR, (Try,k3,hr3));
            {74}out(Sname3, S(TTPSigKey,(Released,S2TTP3)))
    )
)

Translating the process into Horn clauses...
COMPUTATIONTIME translation to clauses: 0.003628s
NUMBERIMPLIES translation to clauses: 6074
-- Query putbegin event:Shas,TTPSendS; not event(Rreceived(Message(x,y,(z,Auth)))) in process 0.
Completing...
200 rules inserted. The rule base contains 116 rules. 25 rules in the queue.
COMPUTATIONTIME completion of rules: 0.047671s
NUMBERIMPLIES completion of rules: 5462
ok, secrecy assumption verified: fact unreachable attacker(TTPDecKey[])
ok, secrecy assumption verified: fact unreachable attacker(TTPSigKey[])
Starting query not event(Rreceived(Message(x,y,(z,Auth))))
goal reachable: begin(TTPSendS(Sname[],S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))),PasswdTable(RPwd3_1))))) && begin(Shas(Sname[],k_1,cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))) && attacker(RPwd3_1) -> end(Rreceived(Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))
Abbreviations:
msgid_1 = msgid[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(RPwd3_1),!1 = @sid]
k_1 = k[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(RPwd3_1),!1 = @sid]
qtmp_1 = qtmp[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(RPwd3_1),!1 = @sid]

Derivation:
Abbreviations:
msgid_1 = msgid[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(RPwd3_1),!1 = @sid]
k_1 = k[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(RPwd3_1),!1 = @sid]
qtmp_1 = qtmp[ttpauth = Auth,sauth = Auth,recipient = PasswdTable(RPwd3_1),!1 = @sid]

1. We assume as hypothesis that
attacker(RPwd3_1).

2. By 1, the attacker may know RPwd3_1.
Using the function PasswdTable the attacker may obtain PasswdTable(RPwd3_1).
attacker(PasswdTable(RPwd3_1)).

3. Using the function Auth the attacker may obtain Auth.
attacker(Auth).

4. By 3, the attacker may know Auth.
By 3, the attacker may know Auth.
Using the function 2-tuple the attacker may obtain (Auth,Auth).
attacker((Auth,Auth)).

5. The message PasswdTable(RPwd3_1) that the attacker may have by 2 may be received at input {8}.
The message (Auth,Auth) that the attacker may have by 4 may be received at input {9}.
The event Shas(Sname[],k_1,cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))) may be executed at {19}.
So the message (TTPname[],E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))))) may be sent on channel PasswdTable(RPwd3_1) at output {20}.
mess(PasswdTable(RPwd3_1),(TTPname[],E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))))).

6. By 2, the attacker may have the channel PasswdTable(RPwd3_1).
By 5, the message (TTPname[],E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))))) may be sent on this channel.
So the attacker may obtain the message (TTPname[],E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))))) by listening on this channel.
attacker((TTPname[],E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))))).

7. By 6, the attacker may know (TTPname[],E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))))).
Using the function 2-proj-6-tuple the attacker may obtain E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))).
attacker(E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))).

8. The attacker has some term secchannel_2.
attacker(secchannel_2).

9. By 2, the attacker may know PasswdTable(RPwd3_1).
By 8, the attacker may know secchannel_2.
Using the function channel_with_host the attacker may obtain channel_with_host(PasswdTable(RPwd3_1),secchannel_2).
attacker(channel_with_host(PasswdTable(RPwd3_1),secchannel_2)).

10. The message PasswdTable(RPwd3_1) that the attacker may have by 2 may be received at input {42}.
So the message PasswdTable(RPwd3_1) may be sent on channel ChannelToTTP[] at output {43}.
mess(ChannelToTTP[],PasswdTable(RPwd3_1)).

11. The message secchannel_2 that the attacker may have by 8 may be received at input {42}.
So the message secchannel_2 may be sent on channel ChannelToTTP[] at output {43}.
mess(ChannelToTTP[],secchannel_2).

12. By 6, the attacker may know (TTPname[],E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))))).
Using the function 5-proj-6-tuple the attacker may obtain qtmp_1.
attacker(qtmp_1).

13. By 2, the attacker may know PasswdTable(RPwd3_1).
By 12, the attacker may know qtmp_1.
Using the function Reply the attacker may obtain Reply(PasswdTable(RPwd3_1),qtmp_1).
attacker(Reply(PasswdTable(RPwd3_1),qtmp_1)).

14. The attacker initially knows cleartext[].
attacker(cleartext[]).

15. By 14, the attacker may know cleartext[].
By 12, the attacker may know qtmp_1.
By 13, the attacker may know Reply(PasswdTable(RPwd3_1),qtmp_1).
By 7, the attacker may know E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))).
Using the function 4-tuple the attacker may obtain (cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))).
attacker((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))).

16. By 15, the attacker may know (cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))).
Using the function H the attacker may obtain H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))).
attacker(H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))).

17. Using the function Wants the attacker may obtain Wants.
attacker(Wants).

18. By 17, the attacker may know Wants.
By 1, the attacker may know RPwd3_1.
By 16, the attacker may know H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))).
Using the function 3-tuple the attacker may obtain (Wants,RPwd3_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))).
attacker((Wants,RPwd3_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))).

19. By 6, the attacker may know (TTPname[],E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))),(Auth,Auth),cleartext[],qtmp_1,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))))).
Using the function 6-proj-6-tuple the attacker may obtain A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))).
attacker(A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))))).

20. By 19, the attacker may know A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))).
By 18, the attacker may know (Wants,RPwd3_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))).
Using the function 2-tuple the attacker may obtain (A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))),(Wants,RPwd3_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))).
attacker((A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))),(Wants,RPwd3_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))).

21. The attacker initially knows TTPname[].
attacker(TTPname[]).

22. By 21, the attacker may know TTPname[].
By 8, the attacker may know secchannel_2.
Using the function channel_with_host the attacker may obtain channel_with_host(TTPname[],secchannel_2).
attacker(channel_with_host(TTPname[],secchannel_2)).

23. By 22, the attacker may have the channel channel_with_host(TTPname[],secchannel_2).
By 20, the attacker may have the message (A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))),(Wants,RPwd3_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))).
So the attacker may send this message on this channel.
mess(channel_with_host(TTPname[],secchannel_2),(A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))),(Wants,RPwd3_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))).

24. The message PasswdTable(RPwd3_1) that may be sent on channel ChannelToTTP[] by 10 may be received at input {57}.
The message secchannel_2 that may be sent on channel ChannelToTTP[] by 11 may be received at input {58}.
The message (A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))),(Wants,RPwd3_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))) that may be sent on channel channel_with_host(TTPname[],secchannel_2) by 23 may be received at input {62}.
The event TTPSendS(Sname[],S(TTPSigKey[],(Released,A(pk(TTPDecKey[]),(Sname[],(Auth,Auth),(Give,k_1,PasswdTable(RPwd3_1),H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))))),PasswdTable(RPwd3_1)))) may be executed at {66}.
So the message (Try,k_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))) may be sent on channel channel_with_host(PasswdTable(RPwd3_1),secchannel_2) at output {68}.
mess(channel_with_host(PasswdTable(RPwd3_1),secchannel_2),(Try,k_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))).

25. By 9, the attacker may have the channel channel_with_host(PasswdTable(RPwd3_1),secchannel_2).
By 24, the message (Try,k_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))) may be sent on this channel.
So the attacker may obtain the message (Try,k_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))) by listening on this channel.
attacker((Try,k_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))))))).

26. By 25, the attacker may know (Try,k_1,H((cleartext[],qtmp_1,Reply(PasswdTable(RPwd3_1),qtmp_1),E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))))).
Using the function 2-proj-3-tuple the attacker may obtain k_1.
attacker(k_1).

27. By 26, the attacker may know k_1.
By 7, the attacker may know E(k_1,Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))).
Using the function decE the attacker may obtain Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)).
attacker(Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))).

28. The message Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)) that the attacker may have by 27 may be received at input {54}.
So event Rreceived(Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth))) may be executed at {55}.
end(Rreceived(Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))).

29. By 28, end(Rreceived(Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))).
The goal is reached, represented in the following fact:
end(Rreceived(Message(PasswdTable(RPwd3_1),msgid_1,(Auth,Auth)))).


Could not find a trace corresponding to this derivation.
RESULT not event(Rreceived(Message(x,y,(z,Auth)))) cannot be proved.
COMPUTATIONTIME solving_queries (include completion): 0.051300s
NUMBERIMPLIES solving_queries (include completion): 1691

--------------------------------------------------------------
Verification summary:

Query not event(Rreceived(Message(x,y,(z,Auth)))) cannot be proved.

--------------------------------------------------------------

