(* Denning-Sacco *)

param verboseClauses = explained.

free c.

(* Public key cryptography *)

fun pk/1.
fun encrypt/2.
reduc decrypt(encrypt(x,pk(y)),y) = x.

(* Signatures *)

fun sign/2.
reduc getmess(sign(m,k)) = m.
reduc checksign(sign(m,k), pk(k)) = m.

(* Host name / key
   The server has a table (host name, public key), which we
   represent by the function getkey. *)

fun host/1.
private reduc getkey(host(x)) = x.

(* Shared-key cryptography *)

fun sencrypt/2.
reduc sdecrypt(sencrypt(x,y),y) = x.

private free secretA, secretB.
query attacker:secretA;
      attacker:secretB.

let processA =
	in(c, (cert1, cert2));
	let (=hostA, =pkA) = checksign(cert1, pkS) in
	let (h2, pk2) = checksign(cert2, pkS) in
	new k;
	out(c, (cert1, cert2, encrypt(sign((hostA, h2, k), skA), pk2)));
	if h2 = hostB then
	out(c, sencrypt(secretA, k)).

let processB =
	in(c, (cert1, cert2, km));
	let (h1, pk1) = checksign(cert1, pkS) in
	let (=hostB, =pkB) = checksign(cert2, pkS) in
	let ks = decrypt(km,skB) in
	let (=h1, =hostB, k) = checksign(ks, pk1) in
	if h1 = hostA then
	out(c, sencrypt(secretB, k)).

let processS =
	in(c, (h1,h2));
	let s1 = getkey(h1) in
	let s2 = getkey(h2) in
	out(c, (sign((h1, s1), skS), sign((h2, s2), skS))).

process new skA; 
	let pkA = pk(skA) in
        out(c, pkA);
        new skB; 
	let pkB = pk(skB) in
        out(c, pkB);
	new skS; 
	let pkS = pk(skS) in
	out(c, pkS);
	let hostA = host(pkA) in
	out(c, hostA);
	let hostB = host(pkB) in
	out(c, hostB);
	((!processA) | (!processB) | (!processS))
