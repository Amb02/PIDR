param verboseClauses = explained.

free c.
(* 

Needham-Schroeder public key protocol
Corrected version by Lowe

	   ? -> A : pkB
Message 1: A -> S : (A, B)
Message 2: S -> A : { B, pkB }_skS
Message 3: A -> B : { N_A, A }_pkB
Message 4: B -> S : (B, A)
Message 5: S -> B : { A, pkA }_skS
Message 6: B -> A : { N_A, N_B, B }_pkA
Message 7: A -> B : { N_B }_pkB

The heart of the protocol is messages 3, 6, 7.

*)

(* Public key cryptography *)

fun pk/1.
fun encrypt/2.
reduc decrypt(encrypt(x,pk(y)),y) = x.

(* Host names
   The server has a table (host name, public key), which we
   represent by the function getkey. *)

fun host/1.
private reduc getkey(host(x)) = x.

(* Signatures *)

fun sign/2.
reduc checksign(sign(x,y),pk(y)) = x.
reduc getmess(sign(x,y)) = x.

(* Shared-key cryptography *)

fun sencrypt/2.
reduc sdecrypt(sencrypt(x,y),y) = x.

private free secretANa, secretANb, secretBNa, secretBNb.
query attacker:secretANa;
      attacker:secretANb;
      attacker:secretBNa;
      attacker:secretBNb.

let processA =  
	(* Choose the other host *)
	in(c,hostX);
	(* Message 1: Get the public key certificate for the other host *)
	out(c, (hostA, hostX));
	(* Message 2 *)
	in(c, ms);
	let (pkX,=hostX) = checksign(ms,pkS) in
        (* Message 3 *)
	new Na; 
        out(c, encrypt((Na, hostA), pkX));
	(* Message 6 *)
        in(c, m); 
        let (=Na, NX2, =hostX) = decrypt(m, skA) in
	(* Message 7 *)
        out(c, encrypt(NX2, pkX));
        (* OK *)
	if hostX = hostB then
	out(c, sencrypt(secretANa, Na));
	out(c, sencrypt(secretANb, NX2)).

let processB =
        (* Message 3 *)
	in(c, m); 
	let (NY, hostY) = decrypt(m, skB) in
	(* Message 4: Get the public key certificate for the other host *)
        out(c, (hostB, hostY));
	(* Message 5 *)
	in(c,ms);
        let (pkY,=hostY) = checksign(ms,pkS) in
        (* Message 6 *)
	new Nb;
	out(c, encrypt((NY, Nb, hostB), pkY));
        (* Message 7 *)
	in(c, m3);
        if Nb = decrypt(m3, skB) then
	(* OK *)
        if hostY = hostA then
	out(c, sencrypt(secretBNa, NY));
	out(c, sencrypt(secretBNb, Nb)).

let processS =  in(c,m); 
	        let (a,b) = m in
		let sb = getkey(b) in
                out(c,sign((sb,b),skS)).

process new skA; let pkA = pk(skA) in
        out(c, pkA);
        new skB; let pkB = pk(skB) in
        out(c, pkB);
	new skS; let pkS = pk(skS) in
	out(c, pkS);
	let hostA = host(pkA) in
	out(c, hostA);
	let hostB = host(pkB) in
	out(c, hostB);
	((!processA) | (!processB) | (!processS))
