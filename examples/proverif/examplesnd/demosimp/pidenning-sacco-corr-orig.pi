(* Denning-Sacco *)

param verboseClauses = explained.

free c.

(* Public key cryptography *)

fun pk/1.
fun aenc/2.
reduc adec(aenc(x,pk(y)),y) = x.

(* Signatures *)

fun sign/2.
reduc getmess(sign(m,k)) = m.
reduc checksign(sign(m,k), pk(k)) = m.

(* Shared-key cryptography *)

fun senc/2.
reduc sdec(senc(x,y),y) = x.

private free secretA, secretB.
query attacker:secretA;
      attacker:secretB.

let processA =
        in(c, x_pkB);
	new k;
	out(c, aenc(sign((pkA, x_pkB, k), skA), x_pkB));
	if x_pkB = pkB then
	out(c, senc(secretA, k)).

let processB =
	in(c, y);
	let y' = adec(y,skB) in
	let (=pkA, =pkB, k) = checksign(y', pkA) in
	out(c, senc(secretB, k)).

process new skA; 
	let pkA = pk(skA) in
        out(c, pkA);
        new skB; 
	let pkB = pk(skB) in
        out(c, pkB);
	((!processA) | (!processB))
