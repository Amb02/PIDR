(* Bellovin, Merritt, Oakland 92, section 3.1
   Version in which A and B talk to anybody 
   The tool was very slow on this example. Problem solved
   as for ekedh1.
*)

free c.

(* Symmetric cryptography
   One does not know whether decryption succeeds or not
   For use with weak secrets *)

fun enc/2.
fun dec/2.
equation dec(enc(x,y),y) = x.
equation enc(dec(x,y),y) = x.

(* Symmetric cryptography
   One knows whether decryption succeeds or not *)

fun senc/2.
reduc sdec(senc(x,y),y) = x.

(* Diffie-Hellman *)

fun g/1.
fun f/2.
equation f(x,g(y)) = f(y,g(x)).

(* Host *)

data host/2.

fun H/1.

(* param verboseRules  = yes. *)

free hostA, hostB.
private free P.

let processA =
	new RA;
	out(c, (hostA, enc(g(RA), P)));
	in(c,(m2,m3));
	let gRB = dec(m2,P) in
	let K = f(RA, gRB) in
	out(c, choice[K,H(KN)]).


let processB =
	in(c, (=hostX, m));
	let gRA = dec(m, P) in
	new RB;
	let K = f(RB, gRA) in
	out(c, (enc(g(RB), P), choice[K,H(KN)])).

let processAtalkingX =
        in(c, (PA,PB));
        let hostX = host(PA,PB) in
        let P = PA in
        processA.

let processBtalkingX =
        in(c, (PA,PB));
        let hostX = host(PA,PB) in
        let P = PB in
        processB.

process 
	new KN;
	(!let hostX = hostB in processA) | 
	(!let hostX = hostA in processB) | 
	(!processAtalkingX) | 
	(!processBtalkingX) 
