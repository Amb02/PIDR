(* Variantes de AKEP2 : 
Bellare Rogaway 1993 : Entity Authentication and Key Distribution
Attaque reflexive quand on enleve l'identitÃ© dans le deuxieme echange *)


param attacker = active.
param simplifyDerivation = true.

(**** Header ****)
free c.
private free honestParticipants.

(* fonctions *)
fun encrypt/2.
reduc decrypt(encrypt(x,y),y) = x.

(* Hypotheses *)

private free K.
free A.
free B.

query evinj: InitAEnd(A,B,z,t) ==> evinj:RespBBegin(B).
query evinj: InitAEnd(A,B,z,t) ==> evinj:RespBSession(B,A,z,t).
query evinj: InitAEnd(A,A,z,t) ==> evinj:RespABegin(A).
query evinj: InitAEnd(A,A,z,t) ==> evinj:RespASession(A,A,z,t).
(* By symmetry, the queries InitBEnd(B, ...) also hold if the ones
above hold *)


query ev:InitAEnd(xA,hostX,xra,xrb).
query ev:InitBEnd(xB,hostX,xra,xrb).
query ev:RespAEnd(hostY,xA,xra,xrb).
query ev:RespBEnd(hostY,xB,xra,xrb).


(* Processus *)
let processInitA = 
    new ra;
    let m1 = (ra,A) in
    out(c,m1);
    in(c,(hostX,m2)); 
    in(honestParticipants, =hostX); (* A talks with A or B *)
    (*if hostX=A then 0
    else*) 
    let (=ra,=hostX,rb) = decrypt(m2,K) in
    let m3 = encrypt((rb,A),K)  in
    event InitAEnd(A,hostX,ra,rb);
    out(c,m3).

let processInitB = 
    new ra;
    let m1 = (ra,B) in
    out(c,m1);
    in(c,(hostX,m2)); 
    in(honestParticipants, =hostX);
    (*if hostX=B then 0
    else*) 
    let (=ra,=hostX,rb) = decrypt(m2,K) in
    let m3 = encrypt((rb,B),K)  in
    event InitBEnd(B,hostX,ra,rb);
    out(c,m3).

let processRespA = 
    in(c,m1);
    let (ra,hostY) = m1 in
    in(honestParticipants, =hostY);
    event RespABegin(A);
    new rb;
    event RespASession(A,hostY,ra,rb);
    let m2 = encrypt((ra,A,rb),K) in
    out(c, (A,m2));
    in(c,m3);
    let (=rb,=hostY)=decrypt(m3,K) in
    event RespAEnd(A,hostY,ra,rb).

let processRespB = 
    in(c,m1);
    let (ra,hostY) = m1 in
    in(honestParticipants, =hostY);
    event RespBBegin(B);
    new rb;
    event RespBSession(B,hostY,ra,rb);
    let m2 = encrypt((ra,B,rb),K) in
    out(c, (B,m2));
    in(c,m3);
    let (=rb,=hostY)=decrypt(m3,K) in
    event RespBEnd(B,hostY,ra,rb).

process 
	(!out(honestParticipants, A)) |  
	(!out(honestParticipants, B)) |  
        (!processInitA) | (!processInitB) |
        (!processRespA) | (!processRespB)
