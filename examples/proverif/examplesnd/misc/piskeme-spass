free c.
(* SKEME *)

(* Public key cryptography *)

fun pk/1.
fun encrypt/2.
reduc decrypt(encrypt(x,pk(y)),y) = x.

(* Hash function *)

fun hash/1.

(* Diffie-Hellman *)

fun exp/2.
fun base/0.
(* equations

exp(exp(x,y),z) = exp(x, y * z)

x * 1 = x
x * inv(x) = 1
x * (y * z) = (x * y) * z
x * y = y * x
inv(inv(x)) = x

*)

(* Keyed hash function *)

fun keyhash/2.

(* Shared-key cryptography *)

fun sencrypt/2.
reduc sdecrypt(sencrypt(x,y),y) = x.

(* Secrecy assumptions *)

not skA.
not skB.
not x.
not y.

private free secretA, secretB.
query secretA.
query secretB.

(* A *)

let processA = in(c, pkX);
               new x; new Ka;
                out(c, (encrypt((pkA, Ka), pkX), exp(base, x)));
                in(c, (m1, m2, m3));
		let Kb = decrypt(m1, skA) in
                let K0 = hash((Ka, Kb)) in
		if m3 = keyhash((exp(base, x), m2, pkX, pkA), K0) then
                 let sh = hash(exp(m2, x)) in 
                 out(c, keyhash((m2, exp(base, x), pkA, pkX), K0));
		 (* OK *)
                 if pkX = pkB then out(c, sencrypt(secretA, sh)).

(* B *)

let processB = in(c, (m1, m2));
               let (pkAr, Ka) = decrypt(m1, skB) in
               new Kb;
               let K0 = hash((Ka, Kb)) in
	       new y;
               let sh = hash(exp(m2, y)) in
	       out(c, (encrypt(Kb, pkAr), exp(base, y), keyhash((m2, exp(base, y), pkB, pkAr), K0)));
               in(c, m3);
	       if m3 = keyhash((exp(base, y), m2, pkAr, pkB), K0) then
               (* OK *)
		if pkAr = pkA then out(c, sencrypt(secretB, sh)).


process 

new skA; let pkA = pk(skA) in
out(c, pkA);
new skB; let pkB = pk(skB) in
out(c, pkB);
((!processA) | (!processB))

