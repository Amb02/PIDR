free c.
(*

Woo and Lam public-key auth protocol (1997)

A -> B: A
B -> A: N
A -> B: { A, B, N }_skA
B -> S: A
S -> B: A, { A, pkA }_skS

Correct

*)

(* Signatures *)

fun pk/1.
fun sign/2.
reduc getmess(sign(m,k)) = m.
reduc checksign(sign(m,k), pk(k)) = m.

(* Host name / key *)

fun host/1.
private reduc getkey(host(x)) = x.

authquery Bparam/1.
authquery Bfull/3.

let processA = in(c, hostB0); (* Choose B *)
               begin Bparam(hostB0);
               out(c, hostA);
               in(c,n);
	       begin Bfull(hostA, n, hostB0);
	       out(c,sign((hostA, hostB0, n),skA)).

let processB = in(c, hostA0);
               new n; out(c,n);
               in(c,m); 
               out(c, hostA0);
               in(c, m3); 
               let (hostA1, m4) = m3 in
               if hostA1 = hostA0 then
                  let (hostA2, pkA2) = checksign(m4, pkS) in
	 	  if hostA2 = hostA0 then
                     let (hostA3, hostB3, n3) = checksign(m,pkA2) in
		     if hostA3 = hostA0 then
                     if hostB3 = hostB then
                     if n3 = n then
			(* OK *)
                        if hostA2 = hostA then
			  end Bparam(hostB);
			  end Bfull(hostA0, n, hostB).

let processS = in(c, hostA);
	       out(c, (hostA, sign((hostA, getkey(hostA)), skS))).

process new skA; new skB; new skS;
        let pkA = pk(skA) in
        let pkB = pk(skB) in
        let pkS = pk(skS) in
	let hostA = host(pkA) in
	let hostB = host(pkB) in
	out(c, pkA); out(c, pkB); out(c, pkS);
	out(c, hostA); out(c, hostB);
	((!processA) | (!processB) | (!processS))
