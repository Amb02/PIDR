free c.
(*

WooLam shared-key auth protocol
Corrections of Gordon, Jeffrey CSFW'01

A -> B : A
B -> A : N (fresh)
A -> B : { m3, B, N }_kAS
B -> S : A,B,{ m3, B, N }_kAS
S -> B : { m5, A, N }_kBS
B: verify { m5, A, N }_kBS = the message from S

Correct.

Full agreement is wrong because the adversary can make B see something
different from { m3, B, N }_kAS (even though the server and A correctly see it)
so this is no real attack.

*)

(* Tags *)

fun m3/0.
fun m5/0.

(* Shared-key cryptography *)

fun encrypt/2.
reduc decrypt(encrypt(m,k),k) = m.

(* Host name / key *)

fun host/1.
private reduc getkey(host(x)) = x.

query ev:endBparam(h) ==> ev:beginBparam(h).
query ev:endBfull(h1,h2,x) ==> ev:beginBfull(h1,h2,x).
query evinj:endBparam(h) ==> evinj:beginBparam(h).
query evinj:endBfull(h1,h2,x) ==> evinj:beginBfull(h1,h2,x).

let processA = in(c, hostB2); (* Choose the B host *)
	       event beginBparam(hostB2);
               out(c,hostA); in(c,n); 
	       event beginBfull(hostB2, hostA, n);
               out(c, encrypt((m3, hostB2, n), kAS)).

let processB = in(c, hostA2); new N; out(c, N); in(c, m);
               out(c, (hostA2, hostB, m));
               in(c, m2);
	       let (m5x, hostA3, N3) = decrypt(m2, kBS) in
		 if m5x = m5 then 
                   if hostA3 = hostA2 then
                     if N3 = N then
                        (* OK *)
                        if hostA2 = hostA then 
			  event endBparam(hostB);
			  event endBfull(hostB, hostA2, N).

let processS = in(c,m);
               let (hostA1, hostB1, m2) = m in
                  let (m3x, hostB2, n) = decrypt(m2, getkey(hostA1)) in
		     if m3x = m3 then
		     if hostB2 = hostB1 then
                        out(c, encrypt((m5, hostA1, n), getkey(hostB1))).

process new kAS; new kBS;
        let hostA = host(kAS) in
        let hostB = host(kBS) in
	out(c, hostA); out(c, hostB);
	((!processA) | (!processB) | (!processS))
