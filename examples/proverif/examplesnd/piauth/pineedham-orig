free c.
(* 

Message 1: A -> B : { Na, A }pkB
Message 2: B -> A : { Na, Nb }pkA
Message 3: A -> B : { Nb }pkB

*)

(* Public key cryptography *)

fun pk/1.
fun encrypt/2.
reduc decrypt(encrypt(x,pk(y)),y) = x.

(* Host *)

fun host/1.
private reduc getkey(host(x)) = x.

(* Signatures *)

fun sign/2.
reduc checksign(sign(x,y),pk(y)) = x.
reduc getmess(sign(x,y)) = x.

authquery Bparam/1.
authquery Bfull/6.
authquery Aparam/1.
authquery Afull/6.

let processA =  
	(* Choose the other host *)
	in(c,hostX); 
	begin Bparam(hostX); 
	(* Get the public key certificate for the other host *)
	out(c, (hostA, hostX));
	in(c, ms); 
	let (pkX,=hostX) = checksign(ms,pkS) in
        (* Message 1 *)
	new Na; 
        out(c, encrypt((Na, hostA), pkX));
        (* Message 2 *)
        in(c, m); 
	let (=Na, NX2) = decrypt(m, skA) in
	begin Bfull(Na, hostA, hostX, pkX, pkA, NX2);
        (* Message 3 *)
        out(c, encrypt(NX2, pkX));
        (* OK *)
	if hostX = hostB then
	end Aparam(hostA);
	end Afull(Na, hostA, hostX, pkX, pkA, NX2).

let processB = 
        (* Message 1 *)
	in(c, m);
	let (NY, hostY) = decrypt(m, skB) in
	begin Aparam(hostY);
	(* Get the public key certificate for the other host *)
        out(c, (hostB, hostY));
	in(c,ms);
        let (pkY,=hostY) = checksign(ms,pkS) in
        (* Message 2 *)
	new Nb;
	begin Afull(NY, hostY, hostB, pkB, pkY, Nb);
        (* Message 3 *)
	out(c, encrypt((NY, Nb), pkY));
	in(c, m3);
        if Nb = decrypt(m3, skB) then
	(* OK *)
        if hostY = hostA then
	end Bparam(hostB);
	end Bfull(NY, hostY, hostB, pkB, pkA, Nb).

let processS =  in(c,m); 
	        let (a,b) = m in
		let sb = getkey(b) in
                out(c,sign((pk(sb),b),skS)).

process new skA; let pkA = pk(skA) in
        out(c, pkA);
        new skB; let pkB = pk(skB) in
        out(c, pkB);
	new skS; let pkS = pk(skS) in
	out(c, pkS);
	let hostA = host(skA) in
	out(c, hostA);
	let hostB = host(skB) in
	out(c, hostB);
	((!processA) | (!processB) | (!processS))
