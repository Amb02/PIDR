(* Needham-Schroeder shared key corrected *)

free c.

(* Shared-key cryptography *)

fun encrypt/2.
reduc decrypt(encrypt(m,k),k) = m.

(* Host name / key *)

fun host/1.
private reduc getkey(host(x)) = x.

(* Function -1 *)

fun minusone/1.
reduc plusone(minusone(x)) = x.

(* Secrecy assumptions *)

not Kas.
not Kbs.

query attacker:secretA[];
      attacker:secretB[].
query ev:endAparam(x,y) ==> ev:beginAparam(x,y).
query ev:endAkey(x,y,z) ==> ev:beginAkey(x,y,z).
query ev:endBparam(x,y) ==> ev:beginBparam(x,y).
query ev:endBkey(x,y,z) ==> ev:beginBkey(x,y,z).
query evinj:endAparam(x,y) ==> evinj:beginAparam(x,y).
query evinj:endAkey(x,y,z) ==> evinj:beginAkey(x,y,z).
query evinj:endBparam(x,y) ==> evinj:beginBparam(x,y).
query evinj:endBkey(x,y,z) ==> evinj:beginBkey(x,y,z).

let processA =
	new secretA;
	in(c, h);
	in(c, bm);
	event beginBparam(A,h);
	new Na;
	out(c,(A, h, Na, bm));
	in(c,m2);
	let (=Na, =h, k, m) = decrypt(m2, Kas) in
	event beginBkey(A, h, k);
	out(c,m);
	in(c, m3);
	let n = decrypt(m3, k) in
	out(c, encrypt(minusone(n), k));
	if h = B then
	event endAparam(A, h);
	event endAkey(A, h, k);
	out(c, encrypt(secretA, k)).

let processB =
	new secretB;
	in(c,h);
	event beginAparam(h, B);
	new J;
	out(c, encrypt((h, J), Kbs));
	in(c,m4);
	let (k,=h,=J) = decrypt(m4,Kbs) in
	event beginAkey(h, B, k);
	new Nb;
	out(c, encrypt(Nb, k));
	in(c,m5);
	let =minusone(Nb) = decrypt(m5,k) in
	if h = A then
	event endBparam(h, B);
	event endBkey(h, B, k);
	out(c, encrypt(secretB, k)).

let processS =
	in(c, (h1,h2,n,bm));
	let ks1 = getkey(h1) in
	let ks2 = getkey(h2) in
	let (=h1,j) = decrypt(bm, ks2) in
	new k;
	out(c, encrypt((n, h2, k, encrypt((k,h1,j),ks2)), ks1)).

process
	new Kas;
	new Kbs;
	let A = host(Kas) in
	let B = host(Kbs) in
	out(c, A);
	out(c, B);
	((!processA) | (!processB) | (!processS))
