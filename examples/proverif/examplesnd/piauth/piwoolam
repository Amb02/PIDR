free c.
(*

WooLam shared-key auth protocol (1997)

A -> B : A
B -> A : N (fresh)
A -> B : { A,B,N }_kAS
B -> S : { A,B,{ A,B,N }_kAS }_kBS
S -> B : { A,B,N }_kBS
B: verify { A,B,N }_kBS = the message from S

Terminates with an attack

*)

(* Shared-key cryptography *)

fun encrypt/2.
reduc decrypt(encrypt(m,k),k) = m.

(* Host name / key *)

fun host/1.
private reduc getkey(host(x)) = x.

query ev:endBparam(h) ==> ev:beginBparam(h).

let processA = in(c, hostB2); (* Choose the B host *)
	       event beginBparam(hostB2);
               out(c,hostA); in(c,n); 
               out(c, encrypt((hostA, hostB2, n), kAS)).

let processB = in(c, hostA2); new N; out(c, N); in(c, m);
               out(c, encrypt((hostA2, hostB, m), kBS));
               in(c, m2);
	       let (hostA3, hostB3, N3) = decrypt(m2, kBS) in
               if hostA3 = hostA2 then
                  if hostB3 = hostB then
                     if N3 = N then
                        (* OK *)
                        if hostA2 = hostA then event endBparam(hostB).

let processS = in(c, hostB0);(* Choose the B host *)
               in(c,m);
               let (hostA1, hostB1, m2) = decrypt(m, getkey(hostB0)) in
               if hostB0 = hostB1 then
                  let (hostA2, hostB2, n) = decrypt(m2, getkey(hostA1)) in
                  if hostA2 = hostA1 then
                     if hostB2 = hostB1 then
                        out(c, encrypt((hostA1, hostB1, n), getkey(hostB0))).

process new kAS; new kBS;
        let hostA = host(kAS) in
        let hostB = host(kBS) in
	out(c, hostA); out(c, hostB);
	((!processA) | (!processB) | (!processS))
