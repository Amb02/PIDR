(* 

Certified email protocol by Abadi, Glew, Horne, and Pinkas
WWW2002

*)

set ignoreTypes = true.

type pkey.
type skey.
type spkey.
type sskey.
type key.
type tag.
type authtag.
type passwd.
type host.
type tquery.
type reply.
type messageid.
type tcertif.

fun channel_for_host(host): channel [data, typeConverter].
fun channel_with_host(host, channel): channel [data].

(* Public key encryption *)

fun pk(skey):pkey.
fun A(pkey, bitstring): bitstring.
reduc forall y: skey, x: bitstring; decA(y, A(pk(y),x)) = x.

(* Signatures *)

fun S(sskey, bitstring): tcertif.
fun Spk(sskey): spkey.
reduc forall y: sskey, x: bitstring; checkS(Spk(y), S(y, x)) = x.
reduc forall y: sskey, x: bitstring; getS(S(y, x)) = x.

(* Shared key encryption *)

fun E(key, bitstring): bitstring.
reduc forall y: key, x: bitstring; decE(y, E(y,x)) = x.

(* Hash function *)

fun H(bitstring): key.

(* Constants to identify messages *)

const Give,      (* Message 1 *)
      Wants,     (* Message 2 *)
      Try,       (* Message 3 *)
      Released,  (* Message 4 *)
      Received: tag [data].  (* For the judge *)

(* Constant authentication modes 
   We encode the authentication modes as pairs:
     BothAuth in the paper is coded (Auth,Auth) 
     SAuth in the paper is coded (Auth,NoAuth)
     TTPAuth in the paper is coded (NoAuth,Auth)
     NoAuth in the paper is coded (NoAuth,NoAuth)
   This makes testing whether S / TTP must authenticate R easier *)

const Auth, NoAuth: authtag [data].

(* Function from R's password to R's name *)

fun PasswdTable(passwd): host.


(* R or S are included in the adversary, so the adversary can compute Reply *)

fun Reply(host, tquery): reply.



const NullQ: tquery [data].

reduc forall q: tquery; getAuthQ(q,NoAuth) = NullQ;
      forall q: tquery; getAuthQ(q,Auth) = q.

const NullR: reply [data].

reduc forall r: reply; getAuthR(r,NoAuth) = NullR;
      forall r: reply; getAuthR(r,Auth) = r.

const NullP: passwd [data].

reduc forall p: passwd; getAuthP(p,NoAuth) = NullP;
      forall p: passwd; getAuthP(p,Auth) = p.

(* Build a message *)

fun Message(host, messageid, bitstring): bitstring [private].

(* TTPname, Sname are public constants, representing the names
   of the hosts. We allow Sname to send to anybody, not just Rname.
   We also allow the TTP to talk to recipients other than Rname
   (represented by the adversary) on an insecure channel.
   cleartext is a public constant, header of the message from S to R *)	

free c: channel.
free cleartext: bitstring.
free Sname,Judgename,TTPname: host.
free TTPSigKey: sskey [private].
free TTPDecKey: skey [private].
free Rpwd: passwd [private].

(* Secrecy assumptions *)

not attacker(TTPDecKey).
not attacker(TTPSigKey).

(* Queries *)

event Rreceived(bitstring).
event JudgeSays(tag, host, bitstring).
event SThinksRhas(bitstring).
event Shas(host, key, bitstring, tquery, reply, bitstring).
event Rhas(channel, bitstring, key).
event TTPSendS(host, tcertif).
event TTPSendS2(host, tcertif).
event TTPSendR(channel, bitstring).
event TTPSendR2(channel, bitstring).



  query x: bitstring;
  	putbegin event:Rhas, TTPSendR;
	event(JudgeSays(Received,PasswdTable(Rpwd),x)).





let processJudge(TTPEncKey: pkey, TTPVerKey: spkey) =
(* S must send TTP's certificate plus other information *)
  in(channel_for_host(Judgename), (certif: tcertif, Sname5: host, k5: key, cleartext5: bitstring, q5: tquery, r5: reply, em5: bitstring));
  let (=Released, S2TTP5: bitstring, Rname5: host) = checkS(TTPVerKey, certif) in
  let m5 = decE(k5,em5) in
  let hs5 = H((cleartext5, q5, r5, em5)) in
  if S2TTP5 = A(TTPEncKey, (Sname5, (Auth, Auth), (Give, k5, Rname5, hs5))) then
     (* The judge says that Rname5 has received m5 *)
     event JudgeSays(Received, Rname5, m5)
  else if S2TTP5 = A(TTPEncKey, (Sname5, (NoAuth, Auth), (Give, k5, Rname5, hs5))) then
     (* The judge says that Rname5 has received m5 *)
     event JudgeSays(Received, Rname5, m5).


let processS(TTPEncKey: pkey, TTPVerKey: spkey) = 
(* S is included in the adversary *)
  0.


let processR(Rname: host, ChannelToTTP: channel) = 
(* Step 2 *)
  in(channel_for_host(Rname), (=TTPname, em2: bitstring, (sauth: authtag,ttpauth: authtag), cleartext2: bitstring, q2: tquery, S2TTP2: bitstring));
  let r2 = getAuthR(Reply(Rname,q2),sauth) in
  let hr = H((cleartext2, q2, r2, em2)) in

  (* Establish the secure channel R-TTP *)
  new secchannel: channel;
  out(ChannelToTTP, Rname);
  out(ChannelToTTP, secchannel);
  let outchannel = channel_with_host(TTPname, secchannel) in
  let inchannel = channel_with_host(Rname, secchannel) in

  event Rhas(secchannel,em2,hr);
  out(outchannel, (S2TTP2, (Wants, getAuthP(Rpwd,ttpauth), hr)));

  (* Step 3 *)
  !
  in(inchannel, (=Try, k3: key, =hr));
  let m3 = decE(k3, em2) in
  (* R has obtained the message m3 = m *)
  event Rreceived(m3).


let processTTP(ChannelToTTP: channel) = 
  (* Establish the secure channel R-TTP *)
  in(ChannelToTTP, receivername: host);
  in(ChannelToTTP, secchannel: channel);
  let inchannel = channel_with_host(TTPname, secchannel) in
  let outchannel = channel_with_host(receivername, secchannel) in

  (* Step 3 *)
  in(inchannel, (S2TTP3: bitstring, (=Wants, RPwd3: passwd, hr3: key)));
  let (Sname3: host, (sauth3: authtag,ttpauth3: authtag), (=Give, k3: key, R3: host, =hr3)) = 
     decA(TTPDecKey, S2TTP3) in
  if R3 = receivername then
  (
     if (ttpauth3, R3) = (Auth, PasswdTable(RPwd3)) then

        (* Records the event *)
        event TTPSendS(Sname3,S(TTPSigKey, (Released, S2TTP3, R3)));
        event TTPSendR(outchannel, (Try, k3, hr3));

        (* Step 3 *)
        out(outchannel, (Try, k3, hr3));

        (* Step 4 *)
        out(channel_for_host(Sname3), S(TTPSigKey, (Released, S2TTP3, R3)))

     else if ttpauth3 = NoAuth then

        (* Records the event *)
        event TTPSendS2(Sname3,S(TTPSigKey, (Released, S2TTP3)));
        event TTPSendR2(outchannel, (Try, k3, hr3));

        (* Step 3 *)
        out(outchannel, (Try, k3, hr3));

        (* Step 4 *)
        out(channel_for_host(Sname3), S(TTPSigKey, (Released, S2TTP3)))
  ).


process 
        let TTPEncKey = pk(TTPDecKey) in
        out(c, TTPEncKey);
        let TTPVerKey = Spk(TTPSigKey) in
	out(c, TTPVerKey);
	let Rname = PasswdTable(Rpwd) in
	out(c, Rname);
	new ChannelToTTP: channel;
        ((!processS(TTPEncKey, TTPVerKey)) | (!processJudge(TTPEncKey, TTPVerKey)) | 
	 (!processR(Rname, ChannelToTTP)) | (!processTTP(ChannelToTTP)) |
	 (!in(c, m: bitstring); out(ChannelToTTP, m)))

